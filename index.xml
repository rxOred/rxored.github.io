<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>rxOred&#39;s blog</title>
    <link>https://rxOred.github.io/</link>
    <description>Recent content on rxOred&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 19 Jan 2022 09:40:08 +0000</lastBuildDate><atom:link href="https://rxOred.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>WhisperGate</title>
      <link>https://rxOred.github.io/post/analysis/whispergate/whispergate/</link>
      <pubDate>Wed, 19 Jan 2022 09:40:08 +0000</pubDate>
      
      <guid>https://rxOred.github.io/post/analysis/whispergate/whispergate/</guid>
      <description>Table of content  Introduction  Samples   Environment  Tools   Analysis  Behavioral analysis Static analysis  The pe Reversing the pe   Extracting boot sector code Reversing boot sector code   The end  Introduction On 05.01.2022, Ukrain had to face a massive cyber attack. This attack was able to take down the IT infrastructure of several organizations completely.
Microsoft incident response team recently released samples of malware used in the campaign.</description>
    </item>
    
    <item>
      <title>Process Hollowing? not really</title>
      <link>https://rxOred.github.io/post/malware/process-hollowing/process-hollowing/</link>
      <pubDate>Sat, 01 Jan 2022 10:21:31 +0000</pubDate>
      
      <guid>https://rxOred.github.io/post/malware/process-hollowing/process-hollowing/</guid>
      <description>(@bound by jademerien)
Table of Content  Introduction The problem The solution  Basics Implementation Achieving more stealth   References The end  Introduction Process hollowing is a code injection / evasion technique that is often used in malware.
Process hollowing technique works by hollowing out a legitimate process image and replacing it with malicous code.
A malware that uses process hollowing starts a target ** process with CREATE_SUSPENDED flag enabled.</description>
    </item>
    
    <item>
      <title>Reversing Anubis</title>
      <link>https://rxOred.github.io/post/analysis/anubis/anubis/</link>
      <pubDate>Mon, 13 Dec 2021 11:50:35 +0000</pubDate>
      
      <guid>https://rxOred.github.io/post/analysis/anubis/anubis/</guid>
      <description>Table of Content  Introduction  Samples   Environment  Tools   Analysis  The Manifest Behavioral analysis Identifying the obfuscator Packed or what Going Down the Rabbit Hole  MainActivity C2s, Tweets and Data Exfiltration Audio Recording Banking Apps Remote Access Achieving Persistence and User Presence SMS Sending, Receiving and Spamming Reading Contacts Say No to google play protect Ransomware Mode     The end  Introduction Anubis is a pretty big banking trojan that targets android devices.</description>
    </item>
    
    <item>
      <title>Simplelocker, an android ransomware</title>
      <link>https://rxOred.github.io/post/analysis/simplelocker/simplelocker/</link>
      <pubDate>Thu, 18 Nov 2021 13:07:00 +0000</pubDate>
      
      <guid>https://rxOred.github.io/post/analysis/simplelocker/simplelocker/</guid>
      <description>Table of Content  Introduction  Samples   Environment  Tools   Dynamic analysis Static analysis  Main What we know so far Encryption Decryption Other stuff   Writing a decrypter The end  Introduction Samples samples can be obtained from various android malware repositories. I had the dex one but had to get an apk version from the koodous website.
Environment - linux host with analysis tools - android vm (API version 16)  Tools - bytecodeviewer - apktool - androgaurd - adb - jd-gui - enjarify  Dynamic analysis Before any analysis, I have created some external storages in my VM so we can confirm thisransomware encrypts those files.</description>
    </item>
    
    <item>
      <title>From AMSI to Reflection 0x0</title>
      <link>https://rxOred.github.io/post/csharploader/bypassing-amsi-with-csharp/</link>
      <pubDate>Sat, 23 Oct 2021 14:20:04 +0000</pubDate>
      
      <guid>https://rxOred.github.io/post/csharploader/bypassing-amsi-with-csharp/</guid>
      <description>Table of Content  Introduction Antimalware Scan Interface  AMSI in action   AMSI internals  AmsiScanString AmsiScanBuffer CAmsiAntimalware::Scan AmsiInitialize   The End  Introduction In Windows environments, in both initial access and post-exploitation phases, script-based malware plays a major role. Often, hackers utilize microsoft office suite to gain initial access (using droppers, loaders) to the victim and Windows powershell to explore internal network, perform scans&amp;hellip; basically to do the post exploitation stuff.</description>
    </item>
    
    <item>
      <title>Reverse engineering Linkeds lists</title>
      <link>https://rxOred.github.io/post/reverse-linked-lists/reverse-linked-lists/</link>
      <pubDate>Sun, 03 Oct 2021 00:49:28 +0000</pubDate>
      
      <guid>https://rxOred.github.io/post/reverse-linked-lists/reverse-linked-lists/</guid>
      <description>Oh hi. Personally, I&amp;rsquo;m not a big fan of competitive programming. Anyhow, I wanted to test my DSA skills so i started doing leetcode a week(or two ig)ago. And I spent an entire day solving some of those challenges. Eventually I came cross a medium level challege, named Reorder List. problem is pretty simple, you are given a head node of a linked list, what you have to do is kinda shuffle nodes around.</description>
    </item>
    
    <item>
      <title>sample_j DllMain</title>
      <link>https://rxOred.github.io/post/practical-re/practical-re-answers2/</link>
      <pubDate>Sat, 02 Oct 2021 00:40:06 +0000</pubDate>
      
      <guid>https://rxOred.github.io/post/practical-re/practical-re-answers2/</guid>
      <description>So last time we finished some exercises from the book pratical reverse engineering. Now, we have page 35 exercises. I wont cover exercise here because some are really straight forward.
without useless intros lets get started.
Chaper 1, page 35 We are starting with the second one, because first one is pretty easy. 2nd question asks us to decompile DllMain.
as we can see, IDA has generated us some information of the stack as well as a nice graph view.</description>
    </item>
    
    <item>
      <title>Practical Reverse Engineering writeup</title>
      <link>https://rxOred.github.io/post/practical-re/practical-re-answers/</link>
      <pubDate>Wed, 29 Sep 2021 09:46:25 +0000</pubDate>
      
      <guid>https://rxOred.github.io/post/practical-re/practical-re-answers/</guid>
      <description>Introduction Hello, rxOred here, with another badly written write-up.
A years ago, i started reading practical reverse engineering book. Eventhough I was familiar with most of those concepts, that book&amp;rsquo;s exercises were pretty challenging. Aand guess what, there were no solutions to those Exercises in the book. Authors have encouraged RE community to share solutions with others using their blogs, r/reverse-egnineering etc.
At that time, i never really wanted to create a blog.</description>
    </item>
    
    <item>
      <title>Compilers 101</title>
      <link>https://rxOred.github.io/post/compilers/compilers01/</link>
      <pubDate>Tue, 28 Sep 2021 22:58:02 +0000</pubDate>
      
      <guid>https://rxOred.github.io/post/compilers/compilers01/</guid>
      <description>Compilers This article is all about compilers.
For many people, a compiler is a mystery. for them, it is like a magical black box that takes the source file as an input and generates a binary file that can be executed.
However, the truth to be told, compilers are not wizards. In this article, we will start from the introduction to the front-end of a compiler from a reverse-engineering perspective.</description>
    </item>
    
    <item>
      <title>Some of rxOred&#39;s cool projects :3</title>
      <link>https://rxOred.github.io/projects/</link>
      <pubDate>Tue, 28 Sep 2021 22:10:39 +0000</pubDate>
      
      <guid>https://rxOred.github.io/projects/</guid>
      <description>zkz zkz is a Linux debugger written in C++. It uses ptrace system call to interact with process memory spaces. It allows user to place breakpoints at memory addresses and line numbers, display symbols, print line numbers, set/get register values and system call tracing.
zkinject zkinject is a C++ library to work with elf binaries, Linux /proc file system and ptrace system call. It abstracts away complexity involve when parsing elf binaries and ptrace.</description>
    </item>
    
    <item>
      <title>About rxOred</title>
      <link>https://rxOred.github.io/about/</link>
      <pubDate>Tue, 28 Sep 2021 16:21:05 +0000</pubDate>
      
      <guid>https://rxOred.github.io/about/</guid>
      <description>rxOred&amp;rsquo;s real name is Jayod, a 17 year-old, self taught programmer / reverse engineer from Hell.
Spread Anarchy!
Contact me  rxored@gmail.com github twitter Spotify Discord rxOred#2655  </description>
    </item>
    
    <item>
      <title>Hello!</title>
      <link>https://rxOred.github.io/post/hello/</link>
      <pubDate>Tue, 28 Sep 2021 16:21:05 +0000</pubDate>
      
      <guid>https://rxOred.github.io/post/hello/</guid>
      <description>Tbh, I don&amp;rsquo;t really know what to write here. A few years ago, when I started out programming, I never thought of or wanted to start blogging. Hell, I never wanted to get into security back then. But things change!.
Here I am, editing the first blog post :)
Anyway, about this blog. Here I will be posting my projects, research, guides, and other useless information on programming, system security, and reverse engineering.</description>
    </item>
    
  </channel>
</rss>
