<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>compilers on rxOred&#39;s blog</title>
    <link>https://rxOred.github.io/tags/compilers/</link>
    <description>Recent content in compilers on rxOred&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 19 May 2023 01:33:03 +0530</lastBuildDate><atom:link href="https://rxOred.github.io/tags/compilers/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Deep Dive Into Ballerina Runtime - Types II</title>
      <link>https://rxOred.github.io/post/compilers/deep-dive-into-ballerina-runtime-types_ii/</link>
      <pubDate>Fri, 19 May 2023 01:33:03 +0530</pubDate>
      
      <guid>https://rxOred.github.io/post/compilers/deep-dive-into-ballerina-runtime-types_ii/</guid>
      <description>Table of Content Background Integer Implementation Background A lot of this is not required. We explored various parts of ballerina native compiler through number of posts and following is essential to understand what is going on with this one. So please read it.
Integer implementation most C family progammers are familiar with size of a type. For instance, an int is exactly 4 bytes in intel architecture. However, there are other int types that are either higher or lower in size, int8, int16 and int64 are 1, 2, and 8 bytes respectively.</description>
      <content>&lt;h1 id=&#34;table-of-content&#34;&gt;Table of Content&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#background&#34;&gt;Background&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#integer-implementation&#34;&gt;Integer Implementation&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;background&#34;&gt;Background&lt;/h1&gt;
&lt;p&gt;A lot of this is not required. We explored various parts of ballerina native compiler through number of posts and following is essential to understand what is going on with this one. So please read it.&lt;/p&gt;
&lt;h1 id=&#34;integer-implementation&#34;&gt;Integer implementation&lt;/h1&gt;
&lt;p&gt;most C family progammers are familiar with size of a type. For instance, an &lt;code&gt;int&lt;/code&gt; is exactly 4 bytes in intel architecture. However, there are other int types that are either higher or lower in size, int8, int16 and int64 are 1, 2, and 8 bytes respectively.&lt;/p&gt;
&lt;p&gt;Ints can also be divided based on two&amp;rsquo;s compliment. There are unsigned ints as well as signeed ints, in which the former cannot represent negative numbers of the number line.&lt;/p&gt;
&lt;p&gt;Ballerina implements this through &lt;code&gt;IntSubtype&lt;/code&gt; custom type.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; type IntSubtype readonly &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; Range&lt;span style=&#34;color:#f92672&#34;&gt;[];&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So it is essentially an array of another custom type called &lt;code&gt;Range&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Ranges are inclusive
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Require min &amp;lt;= max
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; type Range readonly &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; record &lt;span style=&#34;color:#f92672&#34;&gt;{|&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; min&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; max&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|};&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;strings-and-strings&#34;&gt;Strings and Strings&lt;/h1&gt;
&lt;h1 id=&#34;strings-and-strings-1&#34;&gt;Strings and Strings&lt;/h1&gt;
&lt;h1 id=&#34;type-conversion&#34;&gt;Type Conversion&lt;/h1&gt;
&lt;h1 id=&#34;fixing-142-for-fun-and-profit&#34;&gt;Fixing #142 for fun and profit&lt;/h1&gt;
</content>
    </item>
    
    <item>
      <title>Deep Dive Into Ballerina Runtime - Types I</title>
      <link>https://rxOred.github.io/post/compilers/deep-dive-into-ballerina-runtime-types/</link>
      <pubDate>Thu, 23 Mar 2023 15:39:25 +0530</pubDate>
      
      <guid>https://rxOred.github.io/post/compilers/deep-dive-into-ballerina-runtime-types/</guid>
      <description>Table of Content Background Semantic Subtyping Semantic Subtyping implementation in Ballerina ListAtomicType MappingAtomicType CellAtomicType Class Env Cell Types Background Every programming language has some kind of an in built type system. This is even applicable for those languages with dynamic type systems. For a compiler to function, these default types are essential.
Since ballerina is a statically typed language, Ballerina Native compiler defines a fairly descriptive in build type system.</description>
      <content>&lt;h1 id=&#34;table-of-content&#34;&gt;Table of Content&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#background&#34;&gt;Background&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#semantic-subtyping&#34;&gt;Semantic Subtyping&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#semantic-subtyping-implementation-in-ballerina&#34;&gt;Semantic Subtyping implementation in Ballerina&lt;/a&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#listatomictype&#34;&gt;ListAtomicType&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#mappingatomictype&#34;&gt;MappingAtomicType&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#cellatomictype&#34;&gt;CellAtomicType&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#class-env&#34;&gt;Class Env&lt;/a&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#cell-types&#34;&gt;Cell Types&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;background&#34;&gt;Background&lt;/h1&gt;
&lt;p&gt;Every programming language has some kind of an in built type system. This is even applicable for those languages with dynamic type systems. For a compiler to function, these default types are essential.&lt;/p&gt;
&lt;p&gt;Since ballerina is a statically typed language, Ballerina Native compiler defines a fairly descriptive in build type system.&lt;/p&gt;
&lt;p&gt;In this small series of articles, we&amp;rsquo;ll explore the Ins and outs of it as well try to fix some open issues. Possibly #142 since it focuses on another important part of ballerina, semantic subtyping.&lt;/p&gt;
&lt;h1 id=&#34;semantic-subtyping&#34;&gt;Semantic Subtyping&lt;/h1&gt;
&lt;p&gt;A type system of a programming language is often defined using set of rules. At the core of this, subtyping plays a major role.&lt;/p&gt;
&lt;p&gt;Subtyping plays a major role in OOP languages. In fact, it can be defined through OOP concept, polymorphism. According to Wikipedia, a subtype is essentially a datatype, which is related to another, by either semantically or syntactically.&lt;/p&gt;
&lt;p&gt;Say there is a class called Cat. and that Cat inherits from class Animal. In this specific scenario, class Cat is a subtype of class Animal.&lt;/p&gt;
&lt;p&gt;Now how can this be useful in the context of a compiler? Image the following function&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;addFloats&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt; a, &lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt; b) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; b;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;above &lt;code&gt;addFloats&lt;/code&gt; function expects two floats as arguments an returns a float. But what happens if call &lt;code&gt;addFloats&lt;/code&gt; function like this,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;addFloats&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here both parameters passed are integers. A compiler can approach this problem in multiple ways. one of which is to allow use of integers wherever floats are expected. Here, float is the super type and the int is the subtype. Therefore the subtype relation can be written as &lt;code&gt;int &amp;lt;: flaot&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;the other approach is to use a generic interface, or a type that both flaot and integer are derived from.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Number &lt;span style=&#34;color:#a6e22e&#34;&gt;addFloats&lt;/span&gt;(Number a, Number b) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; b;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;here the super type is &lt;code&gt;Number&lt;/code&gt; and elements of both subtypes &lt;code&gt;int&lt;/code&gt; and &lt;code&gt;float&lt;/code&gt; can be passed as parameters to the function.&lt;/p&gt;
&lt;h1 id=&#34;semantic-subtyping-implementation-in-ballerina&#34;&gt;Semantic Subtyping implementation in Ballerina&lt;/h1&gt;
&lt;p&gt;core.bal file contains some of the most important parts of the semantic subtyping implementation of the ballerina language.
&lt;code&gt;Env&lt;/code&gt; classed defined in that file is to be the base for each semantic type that is a subtype.&lt;/p&gt;
&lt;p&gt;However what really caught me is the defintions of below records.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; type BasicTypeCode
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    BT_NIL&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;BT_BOOLEAN&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;BT_INT&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;BT_FLOAT&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;BT_DECIMAL
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;BT_STRING&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;BT_ERROR&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;BT_TYPEDESC&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;BT_HANDLE&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;BT_FUNCTION
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;BT_FUTURE&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;BT_STREAM
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;BT_LIST&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;BT_MAPPING&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;BT_TABLE&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;BT_XML&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;BT_OBJECT
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;BT_CELL&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;BT_UNDEF&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here it defines a new type union called &lt;code&gt;BasicTypeCode&lt;/code&gt; with it can be one of the basic types.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;type Atom RecAtom&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;TypeAtom&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;type RecAtom &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;type TypeAtom readonly &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; record &lt;span style=&#34;color:#f92672&#34;&gt;{|&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; index&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    AtomicType atomicType&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|};&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;type AtomicType ListAtomicType&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;MappingAtomicType&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;CellAtomicType&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Union type &lt;code&gt;Atom&lt;/code&gt;, which is defined above can be either of &lt;code&gt;RecAtom&lt;/code&gt; or &lt;code&gt;TypeAtom&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;a &lt;code&gt;RecAtom&lt;/code&gt; is essentially another name for &lt;code&gt;int&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;TypeAtom&lt;/code&gt;, on the other hand is a record which describes, as the name implies, an atomic type.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;type TypeAtom readonly &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; record &lt;span style=&#34;color:#f92672&#34;&gt;{|&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; index&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    AtomicType atomicType&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|};&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;type AtomicType ListAtomicType&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;MappingAtomicType&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;CellAtomicType&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;An atomic type in general, is a type that garantees I/O (to address space of the program) operations through a single instruction. Say for instance,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-asm&#34; data-lang=&#34;asm&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;    [&lt;span style=&#34;color:#66d9ef&#34;&gt;rbp&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;], &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;These types cannot be divided or filter out furthur. This means, these are the building blocks of all
the types implemented in a language.&lt;/p&gt;
&lt;p&gt;Here in ballerina, &lt;code&gt;AtomicType&lt;/code&gt; is implemented as a union of the following, &lt;code&gt;ListAtomicType, MappingAtomicType, CellAtomicType&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;From what I can see, &lt;code&gt;TypeAtom&lt;/code&gt; is essentially something like &lt;code&gt;std::variant&lt;/code&gt; in C++, a type safe union for &lt;code&gt;AtomicType&lt;/code&gt;. Let us get to exact details later.&lt;/p&gt;
&lt;p&gt;Those above types are implemented in files that are specific to them. So we are about to go over them.&lt;/p&gt;
&lt;h2 id=&#34;listatomictype&#34;&gt;ListAtomicType&lt;/h2&gt;
&lt;p&gt;ListAtomicType is implemented as record of &lt;code&gt;FixedLengthArray&lt;/code&gt; and &lt;code&gt;CellSemType&lt;/code&gt;. definitions can be found in list.bal&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; type ListAtomicType readonly &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; record &lt;span style=&#34;color:#f92672&#34;&gt;{|&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    readonly &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; FixedLengthArray members&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    CellSemType rest&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|};&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;FixedLengthArray&lt;/code&gt; is also a record. An array of a fixed length is represented using this type. According to the comments, the list members can be of any sem type.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; type FixedLengthArray record &lt;span style=&#34;color:#f92672&#34;&gt;{|&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    CellSemType&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; initial&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; fixedLength&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|};&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;if member &lt;code&gt;initial&lt;/code&gt; contains 3 integers 1, 2 and 3, then &lt;code&gt;fixedLength&lt;/code&gt; should be set to 3. Another important fact about &lt;code&gt;FixedLengthArray&lt;/code&gt; is that, if &lt;code&gt;initial&lt;/code&gt; is an array of 100 element semtypes string and int, as if &lt;code&gt;initial = [string, int]; fixedLength = 100&lt;/code&gt;, then, an &lt;code&gt;int&lt;/code&gt; is repeated 99 times.&lt;/p&gt;
&lt;h2 id=&#34;mappingatomictype&#34;&gt;MappingAtomicType&lt;/h2&gt;
&lt;p&gt;this is another basic type that implements a list.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; type MappingAtomicType readonly &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; record &lt;span style=&#34;color:#f92672&#34;&gt;{|&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// sorted
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    string&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; names&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    CellSemType&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; types&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    CellSemType rest&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|};&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;mapping.bal file does not provide much documentation on this specific type.&lt;/p&gt;
&lt;h2 id=&#34;cellatomictype&#34;&gt;CellAtomicType&lt;/h2&gt;
&lt;p&gt;CellAtomicType is a record of two members of types &lt;code&gt;SemType&lt;/code&gt; and &lt;code&gt;CellMutability&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; type CellMutability CELL_MUT_NONE&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;CELL_MUT_LIMITED&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;CELL_MUT_UNLIMITED&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; type CellAtomicType readonly &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; record &lt;span style=&#34;color:#f92672&#34;&gt;{|&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    SemType ty&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    CellMutability mut&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|};&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;CellAtomicType&#39;s&lt;/code&gt; mutability is defined by member &lt;code&gt;mut&lt;/code&gt;, which can be either &lt;code&gt;CELL_MUT_NONE&lt;/code&gt;, &lt;code&gt;CELL_MUT_LIMITED&lt;/code&gt; or &lt;code&gt;CELL_MUT_UNLIMITED&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In the section we&amp;rsquo;ll go over what exactly is a Cell type.&lt;/p&gt;
&lt;h2 id=&#34;class-env&#34;&gt;class Env&lt;/h2&gt;
&lt;p&gt;As we went through this earlier in the post, class Env is the base for all semantic types in ballerina language.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; isolated &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Env&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; table&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;TypeAtom&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;key&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;atomicType&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; atomTable &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; table &lt;span style=&#34;color:#f92672&#34;&gt;[];&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// Set up index 0 to be used by VAL_READONLY
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; ListAtomicType&lt;span style=&#34;color:#f92672&#34;&gt;?[]&lt;/span&gt; recListAtoms &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; LIST_ATOMIC_RO &lt;span style=&#34;color:#f92672&#34;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; MappingAtomicType&lt;span style=&#34;color:#f92672&#34;&gt;?[]&lt;/span&gt; recMappingAtoms &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; MAPPING_ATOMIC_RO &lt;span style=&#34;color:#f92672&#34;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; FunctionAtomicType&lt;span style=&#34;color:#f92672&#34;&gt;?[]&lt;/span&gt; recFunctionAtoms &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[];&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// Count of the total number of non-nil members
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// of recListAtoms, recMappingAtoms and recFunctionAtoms
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; recAtomCount &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;First member of the class is an &lt;code&gt;atomTable&lt;/code&gt;, which is basically a ballerina table of &lt;code&gt;TypeAtom&lt;/code&gt;, which we already discussed with it&amp;rsquo;s member &lt;code&gt;atomicType&lt;/code&gt; as the key.&lt;/p&gt;
&lt;p&gt;Lets keep other members of the class for a later discussion and focus on the init function.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; isolated function &lt;span style=&#34;color:#a6e22e&#34;&gt;init&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// Reserving the first two indexes of atomTable to represent cell VAL and cell NEVER typeAtoms. 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// This is to avoid passing down env argument when doing cell type operations.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// Please refer to the cellSubtypeDataEnsureProper() in cell.bal
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        _ &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;cellAtom&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;CELL_ATOMIC_VAL&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        _ &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;cellAtom&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;CELL_ATOMIC_NEVER&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// Reserving the next index of atomTable to represent the typeAtom required to construct
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// equivalent subtypes of map&amp;lt;any|error&amp;gt; and (any|error)[].
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        _ &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;cellAtom&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;CELL_ATOMIC_INNER&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// Reserving the next two indexes of atomTable to represent typeAtoms related to (map&amp;lt;any|error&amp;gt;)[].
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// This is to avoid passing down env argument when doing tableSubtypeComplement operation.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        _ &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;cellAtom&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;CELL_ATOMIC_INNER_MAPPING&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        _ &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;listAtom&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;LIST_ATOMIC_MAPPING&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// Reserving the next three indexes of atomTable to represent typeAtoms related to readonly type.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// This is to avoid requiring context when referring to readonly type.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// CELL_ATOMIC_INNER_MAPPING_RO &amp;amp; LIST_ATOMIC_MAPPING_RO are typeAtoms reuquired to construct readonly &amp;amp; (map&amp;lt;readonly&amp;gt;)[]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// which is then used for readonly table type when constructing VAL_READONLY.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        _ &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;cellAtom&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;CELL_ATOMIC_INNER_MAPPING_RO&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        _ &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;listAtom&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;LIST_ATOMIC_MAPPING_RO&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        _ &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;cellAtom&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;CELL_ATOMIC_INNER_RO&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the comments it says first two indexes of the atomTable is reserved for cell typeAtoms VAL and NEVER.&lt;/p&gt;
&lt;h3 id=&#34;cell-types&#34;&gt;Cell Types&lt;/h3&gt;
&lt;p&gt;Well I had the same question, what is a cell type? I put out my question on ballerina discord server and got a well descriptive answer.&lt;/p&gt;
&lt;p&gt;From What I understand, a cell type is essentially an abstraction layer build around semantic subtyping to avoid confusion.&lt;/p&gt;
&lt;p&gt;For the sake of argument, let us think of semantic subtyping as simply as ability to interchangably use types based on their semantic (meaning) characteristics.&lt;/p&gt;
&lt;p&gt;Consider the following code&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;function &lt;span style=&#34;color:#a6e22e&#34;&gt;example&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;string arg1&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; returns &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;error &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; arg1 is string &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;fromString&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;arg1&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; arg1
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;the function &lt;code&gt;example&lt;/code&gt; expects an argument of either type int or type string. In the if statement it checks for the condition in which the &lt;code&gt;arg1&lt;/code&gt; is string. if it evaluate true, function returns an int parsed from the string arg1.&lt;/p&gt;
&lt;p&gt;in the else statement, it simply returns the type int &lt;code&gt;arg1&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This exact feature lowkey reminds me of template metaprogramming techniques used by C++ developers for type deduction and to implement type restrictions.&lt;/p&gt;
&lt;p&gt;Now consider the following code.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;type NewRecord record &lt;span style=&#34;color:#f92672&#34;&gt;{|&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;string x&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|}&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here the value space of both &lt;code&gt;NewRecord&lt;/code&gt; and &lt;code&gt;int|string&lt;/code&gt; is same. Therefore it is possible to pass a value of type &lt;code&gt;NewRecord&lt;/code&gt; to function &lt;code&gt;example&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&amp;hellip;&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Deep Dive Into Ballerina Runtime</title>
      <link>https://rxOred.github.io/post/compilers/deep-dive-into-ballerina-runtime/</link>
      <pubDate>Fri, 03 Feb 2023 16:28:21 +0530</pubDate>
      
      <guid>https://rxOred.github.io/post/compilers/deep-dive-into-ballerina-runtime/</guid>
      <description>Table of Content Introduction Samples and Source code Environment Installing Ballerina Building nballerina Overall Architecture Next Steps Introduction Ballerina is a cloud native language developed by a Sri Lankan company, which is the main reason made me wanna look into it. When I first heard about the project, I was pretty surprised to say the least. Because projects like this are somewhat uncommon among companies here.
Stable version of the language runs on JVM.</description>
      <content>&lt;h1 id=&#34;table-of-content&#34;&gt;Table of Content&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#samples-and-source-code&#34;&gt;Samples and Source code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#environment&#34;&gt;Environment&lt;/a&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#installing-ballerina&#34;&gt;Installing Ballerina&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#installing-nballerina&#34;&gt;Building nballerina&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#overall-architecture&#34;&gt;Overall Architecture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#next-steps&#34;&gt;Next Steps&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;Ballerina is a cloud native language developed by a Sri Lankan company, which is the main reason made me wanna look into it. When I first heard about the project, I was pretty surprised to say the least. Because projects like this are somewhat uncommon among companies here.&lt;/p&gt;
&lt;p&gt;Stable version of the language runs on JVM. However, what took my interest is their native compiler. I&amp;rsquo;ve been following its development since last year, when the main repository was nballerina-cpp.&lt;/p&gt;
&lt;p&gt;Anyways, in this series of smol articles, Im gonna dive deep into nballerina runtime.&lt;/p&gt;
&lt;h1 id=&#34;samples-and-source-code&#34;&gt;Samples and Source code&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;&#34;&gt;nballerina source code&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;&#34;&gt;repo containing all the scripts that I&amp;rsquo;ll be using&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;environment&#34;&gt;Environment&lt;/h1&gt;
&lt;p&gt;To build nballerina project, first we need to setup few things including ballerina itself.&lt;/p&gt;
&lt;h2 id=&#34;installing-ballerina&#34;&gt;Installing Ballerina&lt;/h2&gt;
&lt;p&gt;nballerina&amp;rsquo;s compiler is written in the language itself, therefore first we need the ballerina distribution package. It is better to clone this from github and build it yourself.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git clone --recursive git@github.com:ballerina-platform/ballerina-distribution.git
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ballerina uses gradle&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd ballerina-distribution &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; ./gradlew build
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;building-nballerina&#34;&gt;Building nballerina&lt;/h2&gt;
&lt;p&gt;Now we can clone nballerina from its official repo&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git clone git@github.com:ballerina-platform/nballerina.git
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;to build nballerina compiler&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd nballerina/compiler &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; bal build
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;to build ballerina runtime and examples&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd .. &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; make all
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;overall-architecture&#34;&gt;Overall Architecture&lt;/h1&gt;
&lt;p&gt;To give a summery, nballerina is a ccompiler front-end that works with llvm as a backend. This front-end is written in ballerina language itself and is located in the &lt;code&gt;./compiler&lt;/code&gt; directory. Above &lt;code&gt;bal build&lt;/code&gt; command is used to compile the source and translate it to a &lt;code&gt;.jar&lt;/code&gt; file, which then can be used with a java virtual machine to compile ballerina source files into llvm IR files (&lt;code&gt;.ll&lt;/code&gt;).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ballerina&#34; data-lang=&#34;ballerina&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// hello.bal
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; ballerina&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;io&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	io&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;println&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hello ballerina&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;to compile the above source into llvm IR.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;java -jar nballerina.jar &amp;lt;src&amp;gt;.bal
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The above command generates 2 files. One is &lt;code&gt;&amp;lt;src&amp;gt;._init.ll&lt;/code&gt; and the other is &lt;code&gt;&amp;lt;src&amp;gt;.ll&lt;/code&gt;, and both of these are in llvm IR.&lt;/p&gt;
&lt;h2 id=&#34;src_initll-file&#34;&gt;&lt;!-- raw HTML omitted --&gt;._init.ll file&lt;/h2&gt;
&lt;p&gt;If we open up the file with the extension &lt;code&gt;._init.ll&lt;/code&gt;,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-llvm&#34; data-lang=&#34;llvm&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;@_Bi04root0 = &lt;span style=&#34;color:#66d9ef&#34;&gt;constant&lt;/span&gt; {&lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;i64&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;i8&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;addrspace&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)*(&lt;span style=&#34;color:#66d9ef&#34;&gt;i8&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;addrspace&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)*, &lt;span style=&#34;color:#66d9ef&#34;&gt;i64&lt;/span&gt;)*, &lt;span style=&#34;color:#66d9ef&#34;&gt;i64&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;i8&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;addrspace&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)*, &lt;span style=&#34;color:#66d9ef&#34;&gt;i64&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;i8&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;addrspace&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)*)*, &lt;span style=&#34;color:#66d9ef&#34;&gt;i64&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;i8&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;addrspace&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)*, &lt;span style=&#34;color:#66d9ef&#34;&gt;i64&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;i8&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;addrspace&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)*)*, &lt;span style=&#34;color:#66d9ef&#34;&gt;i64&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;i8&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;addrspace&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)*, &lt;span style=&#34;color:#66d9ef&#34;&gt;i64&lt;/span&gt;)*, &lt;span style=&#34;color:#66d9ef&#34;&gt;i64&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;i8&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;addrspace&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)*, &lt;span style=&#34;color:#66d9ef&#34;&gt;i64&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;i64&lt;/span&gt;)*, &lt;span style=&#34;color:#66d9ef&#34;&gt;i64&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;i8&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;addrspace&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)*, &lt;span style=&#34;color:#66d9ef&#34;&gt;i64&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;i64&lt;/span&gt;)*, &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;i8&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;addrspace&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)*, &lt;span style=&#34;color:#66d9ef&#34;&gt;i64&lt;/span&gt;)*, &lt;span style=&#34;color:#66d9ef&#34;&gt;i64&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;i8&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;addrspace&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)*, &lt;span style=&#34;color:#66d9ef&#34;&gt;i64&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt;)*, &lt;span style=&#34;color:#66d9ef&#34;&gt;i64&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;i8&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;addrspace&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)*, &lt;span style=&#34;color:#66d9ef&#34;&gt;i64&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt;)*, &lt;span style=&#34;color:#66d9ef&#34;&gt;i64&lt;/span&gt;, {&lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt;}*, [&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;i64&lt;/span&gt;]} {&lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;i64&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;i8&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;addrspace&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)*(&lt;span style=&#34;color:#66d9ef&#34;&gt;i8&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;addrspace&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)*, &lt;span style=&#34;color:#66d9ef&#34;&gt;i64&lt;/span&gt;)* @_bal_list_generic_get_tagged, &lt;span style=&#34;color:#66d9ef&#34;&gt;i64&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;i8&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;addrspace&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)*, &lt;span style=&#34;color:#66d9ef&#34;&gt;i64&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;i8&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;addrspace&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)*)* @_bal_list_generic_set_tagged, &lt;span style=&#34;color:#66d9ef&#34;&gt;i64&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;i8&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;addrspace&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)*, &lt;span style=&#34;color:#66d9ef&#34;&gt;i64&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;i8&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;addrspace&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)*)* @_bal_list_generic_inexact_set_tagged, &lt;span style=&#34;color:#66d9ef&#34;&gt;i64&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;i8&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;addrspace&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)*, &lt;span style=&#34;color:#66d9ef&#34;&gt;i64&lt;/span&gt;)* @_bal_list_generic_get_int, &lt;span style=&#34;color:#66d9ef&#34;&gt;i64&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;i8&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;addrspace&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)*, &lt;span style=&#34;color:#66d9ef&#34;&gt;i64&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;i64&lt;/span&gt;)* @_bal_list_generic_set_int, &lt;span style=&#34;color:#66d9ef&#34;&gt;i64&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;i8&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;addrspace&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)*, &lt;span style=&#34;color:#66d9ef&#34;&gt;i64&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;i64&lt;/span&gt;)* @_bal_list_generic_inexact_set_int, &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;i8&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;addrspace&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)*, &lt;span style=&#34;color:#66d9ef&#34;&gt;i64&lt;/span&gt;)* @_bal_list_generic_get_float, &lt;span style=&#34;color:#66d9ef&#34;&gt;i64&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;i8&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;addrspace&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)*, &lt;span style=&#34;color:#66d9ef&#34;&gt;i64&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt;)* @_bal_list_generic_set_float, &lt;span style=&#34;color:#66d9ef&#34;&gt;i64&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;i8&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;addrspace&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)*, &lt;span style=&#34;color:#66d9ef&#34;&gt;i64&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt;)* @_bal_list_generic_inexact_set_float, &lt;span style=&#34;color:#66d9ef&#34;&gt;i64&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;262143&lt;/span&gt;, {&lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt;}* &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;, [&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;i64&lt;/span&gt;] []}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;declare&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;i8&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;addrspace&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)* @_bal_list_generic_get_tagged(&lt;span style=&#34;color:#66d9ef&#34;&gt;i8&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;addrspace&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)*, &lt;span style=&#34;color:#66d9ef&#34;&gt;i64&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;declare&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;i64&lt;/span&gt; @_bal_list_generic_set_tagged(&lt;span style=&#34;color:#66d9ef&#34;&gt;i8&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;addrspace&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)*, &lt;span style=&#34;color:#66d9ef&#34;&gt;i64&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;i8&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;addrspace&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)*)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;declare&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;i64&lt;/span&gt; @_bal_list_generic_inexact_set_tagged(&lt;span style=&#34;color:#66d9ef&#34;&gt;i8&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;addrspace&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)*, &lt;span style=&#34;color:#66d9ef&#34;&gt;i64&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;i8&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;addrspace&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)*)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;declare&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;i64&lt;/span&gt; @_bal_list_generic_get_int(&lt;span style=&#34;color:#66d9ef&#34;&gt;i8&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;addrspace&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)*, &lt;span style=&#34;color:#66d9ef&#34;&gt;i64&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;declare&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;i64&lt;/span&gt; @_bal_list_generic_set_int(&lt;span style=&#34;color:#66d9ef&#34;&gt;i8&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;addrspace&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)*, &lt;span style=&#34;color:#66d9ef&#34;&gt;i64&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;i64&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;declare&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;i64&lt;/span&gt; @_bal_list_generic_inexact_set_int(&lt;span style=&#34;color:#66d9ef&#34;&gt;i8&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;addrspace&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)*, &lt;span style=&#34;color:#66d9ef&#34;&gt;i64&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;i64&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;declare&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; @_bal_list_generic_get_float(&lt;span style=&#34;color:#66d9ef&#34;&gt;i8&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;addrspace&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)*, &lt;span style=&#34;color:#66d9ef&#34;&gt;i64&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;declare&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;i64&lt;/span&gt; @_bal_list_generic_set_float(&lt;span style=&#34;color:#66d9ef&#34;&gt;i8&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;addrspace&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)*, &lt;span style=&#34;color:#66d9ef&#34;&gt;i64&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;declare&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;i64&lt;/span&gt; @_bal_list_generic_inexact_set_float(&lt;span style=&#34;color:#66d9ef&#34;&gt;i8&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;addrspace&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)*, &lt;span style=&#34;color:#66d9ef&#34;&gt;i64&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;declare&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; @_B04rootmain()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;define&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; @_bal_main() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;call&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; @_B04rootmain()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;ret&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Anyone famililar with little bit of llvm can easily understand above snippet. There, we can see a function called &lt;code&gt;_bal_main&lt;/code&gt;. This function in turn calls another function declared &lt;code&gt;_B04rootmain&lt;/code&gt;. However, there is llvm for implementation of that function as well as for our main fuction. Therefore it is safe to assume that this rootmain is in fact, our main function, or at least calls it.&lt;/p&gt;
&lt;p&gt;To get a clear view, we can refer the source code.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// nballerina/runtime/main.c
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    _bal_stack_guard &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;__builtin_frame_address&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; STACK_SIZE;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;_bal_main&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;so this doesnt really give us any big clues on how our code gets executed but now we know for sure that the first few lines of code that&amp;rsquo;s gonna get executed is initialization of stack guard and call to function &lt;code&gt;_bal_main&lt;/code&gt;, which we saw earlier.&lt;/p&gt;
&lt;p&gt;Note that we might wanna pay attention to this stack guard implementation later on.&lt;/p&gt;
&lt;h2 id=&#34;srcll-file&#34;&gt;&lt;!-- raw HTML omitted --&gt;.ll file&lt;/h2&gt;
&lt;p&gt;Lets take a look at the other file nballerina compiler generated for us.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-llvm&#34; data-lang=&#34;llvm&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;hello&lt;/span&gt;.&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;ll&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;@_bal_stack_guard = &lt;span style=&#34;color:#66d9ef&#34;&gt;external&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;global&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;i8&lt;/span&gt;*
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;@_Bi04root0 = &lt;span style=&#34;color:#66d9ef&#34;&gt;external&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;constant&lt;/span&gt; {&lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;@.str0 = &lt;span style=&#34;color:#66d9ef&#34;&gt;internal&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;unnamed_addr&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;constant&lt;/span&gt; {&lt;span style=&#34;color:#66d9ef&#34;&gt;i16&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;i16&lt;/span&gt;, [&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;i8&lt;/span&gt;]} {&lt;span style=&#34;color:#66d9ef&#34;&gt;i16&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;i16&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;, [&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;i8&lt;/span&gt;] &lt;span style=&#34;color:#66d9ef&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hello ballerina\00\00\00\00\00&amp;#34;&lt;/span&gt;}, &lt;span style=&#34;color:#66d9ef&#34;&gt;align&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[...]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;declare&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; @_Bb02ioprintln(&lt;span style=&#34;color:#66d9ef&#34;&gt;i8&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;addrspace&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)*)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;define&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; @_B04rootmain() !dbg !5 {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  %1 = &lt;span style=&#34;color:#66d9ef&#34;&gt;alloca&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;i8&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;addrspace&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)*
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  %2 = &lt;span style=&#34;color:#66d9ef&#34;&gt;alloca&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;i8&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;addrspace&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)*
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  %3 = &lt;span style=&#34;color:#66d9ef&#34;&gt;alloca&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;i8&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  %4 = &lt;span style=&#34;color:#66d9ef&#34;&gt;load&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;i8&lt;/span&gt;*, &lt;span style=&#34;color:#66d9ef&#34;&gt;i8&lt;/span&gt;** @_bal_stack_guard
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  %5 = &lt;span style=&#34;color:#66d9ef&#34;&gt;icmp&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ult&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;i8&lt;/span&gt;* %3, %4
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;br&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;i1&lt;/span&gt; %5, &lt;span style=&#34;color:#66d9ef&#34;&gt;label&lt;/span&gt; %16, &lt;span style=&#34;color:#66d9ef&#34;&gt;label&lt;/span&gt; %6
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[...]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;.str0&lt;/code&gt; is the hello world string we had in our source file. However, we dont exactly know how ballerina works with strings (might be the next topic I&amp;rsquo;ll go through).&lt;/p&gt;
&lt;p&gt;In addition to that, definition for &lt;code&gt;_B04rootmain&lt;/code&gt; function referenced in the &lt;code&gt;hello._init.ll&lt;/code&gt; file. This as far as we can see, reflects the code we wrote in the source file&amp;rsquo;s main function.&lt;/p&gt;
&lt;p&gt;At the bottom of &lt;code&gt;hello.ll&lt;/code&gt; file, we can see the debug information nballerina compiler has generated for us.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-llvm&#34; data-lang=&#34;llvm&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;hello&lt;/span&gt;.&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;ll&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[...]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;!llvm.module.flags = !{!0}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;!llvm.dbg.cu = !{!2}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;!0 = !{&lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, !&amp;#34;Debug Info Version&amp;#34;, &lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;!1 = !DIFile(filename:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hello.bal&amp;#34;&lt;/span&gt;, directory:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;!2 = &lt;span style=&#34;color:#66d9ef&#34;&gt;distinct&lt;/span&gt; !DICompileUnit(language: &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;DW_LANG_C&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;99&lt;/span&gt;, file: !1, isOptimized: &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;, runtimeVersion: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, emissionKind: &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;FullDebug&lt;/span&gt;, splitDebugInlining: &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;!3 = !DISubroutineType(types: !4)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;!4 = !{}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;!5 = &lt;span style=&#34;color:#66d9ef&#34;&gt;distinct&lt;/span&gt; !DISubprogram(name:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;main&amp;#34;&lt;/span&gt;, linkageName:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;_B04rootmain&amp;#34;&lt;/span&gt;, scope: !1, file: !1, line: &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, type: !3, spFlags: &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;DISPFlagLocalToUnit&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;DISPFlagDefinition&lt;/span&gt;, unit: !2, retainedNodes: !6)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;!6 = !{}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;!7 = !DILocation(line: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, column: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, scope: !5)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;!8 = !DILocation(line: &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, column: &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;, scope: !5)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;!9 = !DILocation(line: &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, column: &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;, scope: !5)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;!10 = !DILocation(line: &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, column: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, scope: !5)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[...]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Line !5 of the above snippet confirms out assumption that &lt;code&gt;main&lt;/code&gt; function is in fact, &lt;code&gt;rootmain&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;generation-of-llvm-ir&#34;&gt;generation of llvm IR&lt;/h2&gt;
&lt;p&gt;By looking at the &lt;code&gt;/compiler&lt;/code&gt; source, we can get a clear idea how above two files are being generated.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ballerina&#34; data-lang=&#34;ballerina&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// main.bal
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; filenames&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;Options opts&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;returns&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;error&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#f92672&#34;&gt;[...]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; filename in filenames &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;basename&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; ext&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; basenameExtension&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;filename&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ext &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; SOURCE_EXTENSION &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            CompileError&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; err &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; compileBalFile&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;filename&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; basename&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; check &lt;span style=&#34;color:#a6e22e&#34;&gt;chooseOutputBasename&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;basename&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; opts&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;outDir&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;),&lt;/span&gt; nbackOptions&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; opts&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; err is err&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;Internal &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                panic &lt;span style=&#34;color:#a6e22e&#34;&gt;error&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;d&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;toString&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;err&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;detail&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()),&lt;/span&gt; err&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			&lt;span style=&#34;color:#f92672&#34;&gt;[...]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ext &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; TEST_EXTENSION &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            check &lt;span style=&#34;color:#a6e22e&#34;&gt;compileBaltFile&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;filename&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; basename&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; opts&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;outDir&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;?:&lt;/span&gt; check file&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;parentPath&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;filename&lt;span style=&#34;color:#f92672&#34;&gt;),&lt;/span&gt; nbackOptions&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; opts&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;[...]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;for each source file that are given as input to the nballerina compiler, it checks if extension is &lt;code&gt;.bal&lt;/code&gt; (&lt;code&gt;SOURCE_EXTENTION&lt;/code&gt;) or &lt;code&gt;.balt&lt;/code&gt; (&lt;code&gt;TEST_EXTENSION&lt;/code&gt;), in which the latter is the extension for ballerina test files. Then there&amp;rsquo;s somewhat common few lines of code for both conditions, a call to &lt;code&gt;compileBalFile / compileBaltFile&lt;/code&gt;, passing filename, filename without extension (basename) and optional output directory and other few options as arguments.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ballerina&#34; data-lang=&#34;ballerina&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// compile.bal
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;compileBalFile&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; filename&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; basename&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; outputBasename&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; nback&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;Options nbackOptions&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; OutputOptions outOptions&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;returns&lt;/span&gt; CompileError&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    CompileContext cx &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; new&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;basename&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; outputBasename&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; nbackOptions&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; outOptions&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    front&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;ResolvedModule mod &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; check &lt;span style=&#34;color:#a6e22e&#34;&gt;processModule&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;cx&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; DEFAULT_ROOT_MODULE_ID&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;filename&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;],&lt;/span&gt; cx&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;outputFilename&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    check mod&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;validMain&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    check &lt;span style=&#34;color:#a6e22e&#34;&gt;generateInitModule&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;cx&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; mod&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;compileBalFile&lt;/code&gt; is a fairly simple function. Honestly I expected a 500 lines of long function.&lt;/p&gt;
&lt;p&gt;First above function does some checks, most of which are not important at the moment, and calls &lt;code&gt;generateInitModule&lt;/code&gt; with &lt;code&gt;CompileContext&lt;/code&gt; and &lt;code&gt;ResolveModule&lt;/code&gt;as parameters.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ballerina&#34; data-lang=&#34;ballerina&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// compile.bal
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;generateInitModule&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;CompileContext cx&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; front&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;ResolvedModule entryMod&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;returns&lt;/span&gt; CompileError&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    LlvmModule initMod &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; check cx&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;buildInitModule&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;filterFuncs&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;entryMod&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getExports&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()));&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; initOutFilename &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; cx&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;outputFilename&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;._init&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; initOutFilename &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        check &lt;span style=&#34;color:#a6e22e&#34;&gt;outputModule&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;initMod&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; initOutFilename&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; cx&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;outputOptions&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It is clear from the above snippet that this function is the one that is reponsible for creating the file with &lt;code&gt;._init.ll&lt;/code&gt; extension, to the same file which they refer to as init module.
Note that there is more to this funciton which we can simply ignore for now, such as what is this &lt;code&gt;LlvmModule&lt;/code&gt; class and &lt;code&gt;CompileContext&lt;/code&gt;. &lt;code&gt;ouputModule&lt;/code&gt; function can be our next point of interest.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ballerina&#34; data-lang=&#34;ballerina&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// output.bal
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;#&lt;/span&gt; The preferred output extension for the output filename&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;const OUTPUT_EXTENSION &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.ll&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; OutputOptions &lt;span style=&#34;color:#66d9ef&#34;&gt;record&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; target &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;outputModule&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;LlvmModule llMod&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; outFilename&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; OutputOptions options&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;returns&lt;/span&gt; io&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;Error&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; target &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; options&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;target&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; target &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        llMod&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setTarget&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;target&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; llMod&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;printModuleToFile&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;outFilename&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;See the &lt;code&gt;OUTPUT_EXTENSION&lt;/code&gt; is set to &lt;code&gt;.ll&lt;/code&gt;. function &lt;code&gt;outputModule&lt;/code&gt; takes &lt;code&gt;LlvmModule&lt;/code&gt; as the first argument and outputs the file &lt;code&gt;outFilename&lt;/code&gt; using &lt;code&gt;llMod.printModuleToFile&lt;/code&gt; method, which simply a file i/o function.&lt;/p&gt;
&lt;h2 id=&#34;llvm-bytecode-files&#34;&gt;llvm bytecode files&lt;/h2&gt;
&lt;p&gt;Those two files generated by nballerina.jar should then be linked with &lt;code&gt;/runtime/balrt_inline.h&lt;/code&gt; to generate llvm bytecode file per each IR file.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;/runtime/balrt_inline.h&lt;/code&gt; is the main header file of the runtime. This file, along with other &lt;code&gt;.h&lt;/code&gt; files make up the file &lt;code&gt;/runtime/balrt_inline.bc&lt;/code&gt;, which is a llvm bytecode file (&lt;code&gt;.bc&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;This bytecode file contains all the code that is necessary to run a ballerina source file compiled with nballerina compiler. In order for this to work, the compiler generated &lt;code&gt;.ll&lt;/code&gt; files should also be converted into &lt;code&gt;.bc&lt;/code&gt; with &lt;code&gt;/runtime/balrt_inline.bc&lt;/code&gt; linked to it.&lt;/p&gt;
&lt;p&gt;This can be done using llvm-link.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;llvm-link hello._init.ll  ~/repos/nballerina/runtime/balrt_inline.bc -o hello._init.bc
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;llvm-link hello.ll ~/repos/nballerina/runtime/balrt_inline.bc -o hello.bc
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;llvm-link generates llvm bytecode files by linking the input IR file with ballerina runtime header file.&lt;/p&gt;
&lt;p&gt;llvm bytecode files are basically bullshit unreadable version of IR so we wont be looking at those since there&amp;rsquo;s simply no use.&lt;/p&gt;
&lt;h1 id=&#34;next-steps&#34;&gt;Next Steps&lt;/h1&gt;
&lt;p&gt;We went through some small components of ballerina runtime and compiler in this article. In the next one, we will explore &lt;code&gt;LlvmModule&lt;/code&gt; and &lt;code&gt;CompileContext&lt;/code&gt;.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Compilers 101</title>
      <link>https://rxOred.github.io/post/compilers/compilers01/</link>
      <pubDate>Tue, 28 Sep 2021 22:58:02 +0000</pubDate>
      
      <guid>https://rxOred.github.io/post/compilers/compilers01/</guid>
      <description>Compilers This article is all about compilers.
For many people, a compiler is a mystery. for them, it is like a magical black box that takes the source file as an input and generates a binary file that can be executed.
However, the truth to be told, compilers are not wizards. In this article, we will start from the introduction to the front-end of a compiler from a reverse-engineering perspective.</description>
      <content>&lt;h1 id=&#34;compilers&#34;&gt;Compilers&lt;/h1&gt;
&lt;p&gt;This article is all about compilers.&lt;/p&gt;
&lt;p&gt;For many people, a compiler is a mystery. for them, it is like a magical black box that takes the source file as an input and generates a binary file that can be executed.&lt;/p&gt;
&lt;p&gt;However, the truth to be told, compilers are not wizards. In this article, we will start from the introduction to the front-end of a compiler from a reverse-engineering perspective.&lt;/p&gt;
&lt;p&gt;The next articles will contain detailed explanations of the optimizer and the back-end.&lt;/p&gt;
&lt;h2 id=&#34;what-is-a-compiler-and-how-does-it-affect-the-reverse-engineering-process&#34;&gt;What is a compiler and how does it affect the reverse engineering process.&lt;/h2&gt;
&lt;p&gt;A compiler is a very complex piece of software, and what it essentially does is, taking one representation of a program as an input and generating a representation of the same program.&lt;/p&gt;
&lt;p&gt;This input representation is usually the text file containing the source code that complies with the specifications of a specific high-level language. And the&lt;/p&gt;
&lt;p&gt;Output is usually a low-level language representation of the same program.&lt;/p&gt;
&lt;p&gt;Sounds not that complex right? Well, this is just a high-level overview. During this process of translation between different representations, the input source will have to face many algorithms, techniques employed by the compiler to optimize the low-level representation it generates. These algorithms may add more levels of complexity on top of the original code.&lt;/p&gt;
&lt;p&gt;And may even contain code that the developer is not intended of writing. These things make it harder for someone to read the compiler-generated code.&lt;/p&gt;
&lt;h2 id=&#34;compiler-architecture&#34;&gt;Compiler architecture.&lt;/h2&gt;
&lt;p&gt;Compiler architecture mainly consists of 3 things&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- Front end
- Optimizer
- Back end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I this first article, let&amp;rsquo;s dive into the Front end.&lt;/p&gt;
&lt;h2 id=&#34;the-front-end&#34;&gt;The front end.&lt;/h2&gt;
&lt;p&gt;tbh, the front is the least important out of the above 3 in a reverse engineering perspective. anyway&amp;hellip;&lt;/p&gt;
&lt;p&gt;So what does this thing do? well, the front end is the place where the process of compilation begins.&lt;/p&gt;
&lt;h2 id=&#34;lexical-analysis&#34;&gt;Lexical analysis&lt;/h2&gt;
&lt;p&gt;Lexical analyzer is a part of the compiler front end and is responsible for tokenizing the given source file. What this means is that, when given a stream of characters, a lexical analyzer can turn that stream of characters into a set of distinct lexemes. These lexemes can&lt;/p&gt;
&lt;p&gt;be separated by some delimiter. A token can have many lexemes, which essentially means that a token is a category of lexemes if that makes sense.&lt;/p&gt;
&lt;p&gt;for example, following statement&lt;/p&gt;
&lt;p&gt;&lt;code&gt; if ( i == 0 )&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;can be broken down into&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;lexemes&lt;/th&gt;
&lt;th&gt;token&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;if&lt;/td&gt;
&lt;td&gt;condition&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(&lt;/td&gt;
&lt;td&gt;bracket_open&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;i&lt;/td&gt;
&lt;td&gt;indetifier&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;equal_sign&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;integer&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;)&lt;/td&gt;
&lt;td&gt;bracket_end&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Tokenizing is very similar to how we break down complex sentences in natural languages. just like how a sentence is divided into different parts.&lt;/p&gt;
&lt;p&gt;But unlike humans, to achieve this task, lexical analyzers use pattern matching algorithms and regular expressions.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s also worth mentioning that lexical analysis or tokenizing can be done using unix utilities like FLEX and ANTLR.&lt;/p&gt;
&lt;h2 id=&#34;syntax-analysis&#34;&gt;Syntax analysis&lt;/h2&gt;
&lt;p&gt;Syntax analysis is the second phase of the compiler&amp;rsquo;s front end. Unlike lexical analysis, where pattern matching algorithms and regular expressions are used to identify tokens, Syntax analysis use a&lt;/p&gt;
&lt;p&gt;concept known as Context-Free Grammar (CFGs). Context-Free Grammar is kinda similar to regular grammar but it&amp;rsquo;s mainly used to describe the syntax of programming languages. basically, it&amp;rsquo;s a superset of regular grammar.&lt;/p&gt;
&lt;p&gt;When the lexical analyzer outputs the stream of tokens, these tokens are then fed into the syntax analyzer. Then the syntax analyzer analyzes and parses the stream of tokens against different rules and&lt;/p&gt;
&lt;p&gt;detect syntax errors in the code.&lt;/p&gt;
&lt;p&gt;for example, &lt;code&gt;if ( i == 0 &lt;/code&gt; is passed down, it is the syntax analyzers job to report it as an error. However, some syntax analyzers are capable of continuing the parsing process even if there are syntax errors. To achieve&lt;/p&gt;
&lt;p&gt;this, syntax analyzers use error recovery strategies.&lt;/p&gt;
&lt;p&gt;After parsing all the syntax, the syntax analyzer should generate a parse tree. A parse tree is a representation of the production rules.&lt;/p&gt;
&lt;p&gt;for example, applying left-derivation production rule on &lt;code&gt;x + b - c&lt;/code&gt;, resulting parse tree is&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;E -&amp;gt; E - E

E -&amp;gt; E + E - E

E -&amp;gt; id + E - E

E -&amp;gt; id + id - id



        E
    ---------
    |   |   |
    E   -   E
____|____
|   |   |
E   +   E
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Syntax analysis can be done using YACC(Yet Another Compiler Compiler), CUP, Bison, and ANTLR.&lt;/p&gt;
&lt;h3 id=&#34;abstract-synstax-trees-asts&#34;&gt;Abstract Synstax Trees (ASTs)&lt;/h3&gt;
&lt;p&gt;Just like a parse tree, an abstract syntax tree or AST is a graph representation of the source code. How an AST differs from a parse tree is, an AST is a simplified version of the parse tree. And in ASTs operators are internal nodes. ASTs are also considered to be the out of syntax analysis phase of a compiler.&lt;/p&gt;
&lt;p&gt;Remember CFGs?, in modern programming languages, there are lots of things that CFGs cant express. for example type definitions. Almost every modern language allows new types. However, CFGs cannot represent new types and&lt;/p&gt;
&lt;p&gt;their usage. ASTs can solve these problems.&lt;/p&gt;
&lt;p&gt;Another major usage of ASTs is that a full traversal of the AST data structure represents the correctness of the program. ASTs are heavily used in semantic analysis too.&lt;/p&gt;
&lt;p&gt;So yeah that&amp;rsquo;s it for the compiler front end. I suggest readers go through &amp;ldquo;Concepts of programming languages&amp;rdquo; for more detailed explanations.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ll do the optimization article soon.&lt;/p&gt;
&lt;p&gt;#Spread Anarchy!&lt;/p&gt;
</content>
    </item>
    
  </channel>
</rss>
