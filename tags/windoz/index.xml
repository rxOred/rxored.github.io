<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>windoz on rxOred&#39;s blog</title>
    <link>https://rxOred.github.io/tags/windoz/</link>
    <description>Recent content in windoz on rxOred&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 19 Jan 2022 09:40:08 +0000</lastBuildDate><atom:link href="https://rxOred.github.io/tags/windoz/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>WhisperGate</title>
      <link>https://rxOred.github.io/post/analysis/whispergate/whispergate/</link>
      <pubDate>Wed, 19 Jan 2022 09:40:08 +0000</pubDate>
      
      <guid>https://rxOred.github.io/post/analysis/whispergate/whispergate/</guid>
      <description>Table of content  Introduction  Samples   Environment  Tools   Analysis  Behavioral analysis Static analysis  The pe Reversing the pe   Extracting boot sector code Reversing boot sector code   The end  Introduction Dozens of Ukranian government sites, including Ministry of foreign affairs, Cabinet of ministers and security council have been hit by a massive cyber attack.
Microsoft incident response team recently released samples of destructive malware used in the campaign.</description>
    </item>
    
    <item>
      <title>Process Hollowing? not really</title>
      <link>https://rxOred.github.io/post/malware/process-hollowing/process-hollowing/</link>
      <pubDate>Sat, 01 Jan 2022 10:21:31 +0000</pubDate>
      
      <guid>https://rxOred.github.io/post/malware/process-hollowing/process-hollowing/</guid>
      <description>(@bound by jademerien)
Table of Content  Introduction The problem The solution  Basics Implementation Achieving more stealth   References The end  Introduction Process hollowing is a code injection / evasion technique that is often used in malware.
Process hollowing technique works by hollowing out a legitimate process image and replacing it with malicous code.
A malware that uses process hollowing starts a target ** process with CREATE_SUSPENDED flag enabled.</description>
    </item>
    
    <item>
      <title>From AMSI to Reflection 0x0</title>
      <link>https://rxOred.github.io/post/csharploader/reverse-engineering-anti-malware-scan-interface/</link>
      <pubDate>Sat, 23 Oct 2021 14:20:04 +0000</pubDate>
      
      <guid>https://rxOred.github.io/post/csharploader/reverse-engineering-anti-malware-scan-interface/</guid>
      <description>Table of Content  Introduction Antimalware Scan Interface  AMSI in action   AMSI internals  AmsiScanString AmsiScanBuffer CAmsiAntimalware::Scan AmsiInitialize   The End  Introduction In Windows environments, in both initial access and post-exploitation phases, script-based malware plays a major role. Often, hackers utilize microsoft office suite to gain initial access (using droppers, loaders) to the victim and Windows powershell to explore internal network, perform scans&amp;hellip; basically to do the post exploitation stuff.</description>
    </item>
    
  </channel>
</rss>
