<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>reverse-engineering on rxOred&#39;s blog</title>
    <link>https://rxOred.github.io/tags/reverse-engineering/</link>
    <description>Recent content in reverse-engineering on rxOred&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 23 Oct 2021 14:20:04 +0000</lastBuildDate><atom:link href="https://rxOred.github.io/tags/reverse-engineering/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Bypassing AMSI (Antimalware Scan Interface) With CSharp 0x00</title>
      <link>https://rxOred.github.io/post/csharploader/bypassing-amsi-with-csharp/</link>
      <pubDate>Sat, 23 Oct 2021 14:20:04 +0000</pubDate>
      
      <guid>https://rxOred.github.io/post/csharploader/bypassing-amsi-with-csharp/</guid>
      <description>Ah yes. Windoz, the most popular desktop operating system solution out there. And, the most attacker-friendly operating system out there. At least, was.
Windows has a really good reputation in the malware industry. Red teamers often use this to their advantage and use malware to maintain persistent access to the victim machine.
Out of the tools that they use to fulfill this task, script-based malware and payloads play a major role.</description>
      <content>&lt;p&gt;Ah yes. Windoz, the most popular desktop operating system solution out there. And, the most attacker-friendly operating system out there. At least, &lt;code&gt;was&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Windows has a really good reputation in the malware industry. Red teamers often use this to their advantage and use malware to maintain persistent access to the victim machine.&lt;/p&gt;
&lt;p&gt;Out of the tools that they use to fulfill this task, script-based malware and payloads play a major role. And to execute those stuff, they mostly use Windows PowerShell, a powerful administrative tool mostly used by sysadmins. Another most important software when it comes to windows malware is Microsoft office software. It is a proven fact that the most notable malware outbreaks in the past few years have something to do with VBA macros. in 2007 Microsoft shipped office packages with macro disabled by default. Yet those type of malware is still alive and well.&lt;/p&gt;
&lt;p&gt;And as a result, Microsoft and antimalware vendors have developed many security mechanisms to deal with those threats. For example, modern anti-malware solutions can statically analyze scripts, binaries and detect whether they are malicious or not using signatures such as strings.&lt;/p&gt;
&lt;p&gt;And because of that, malware authors use various techniques to bypass those defense mechanisms. One of the major techniques is code obfuscation.&lt;/p&gt;
&lt;p&gt;consider the following example, that I took from MSDN.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; displayEvilString
    &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        Write-Host &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pwnd!&amp;#39;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Assuming the above PowerShell snippet is malicious, we can write a signature to detect the malware. this signature can be &lt;code&gt;Write-Host &#39;pwnd!&#39;&lt;/code&gt; or simply &lt;code&gt;&#39;pwnd!&#39;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;So to avoid signature-based detection, the above snippet can be obfuscated like shown below.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; obfuscatedDisplayEvilString
    &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        $xorKey &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;123&lt;/span&gt;
        $code &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;LHsJexJ7D3see1Z7M3sUewh7D3tbe1x7C3sMexV7H3tae1x7&amp;#34;&lt;/span&gt;
        $byte &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;Convert&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;::FromBase64String&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;$code&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
        $newBytes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; foreach&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;$byte in $bytes&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            $byte -bxor $xorKey
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
        $newCode &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;System.Text.Encoding&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;::Unicode.GetString&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;$newBytes&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And this is a win for malware authors since this is beyond what anti-malware solutions can emulate or detect until AMSI joins the conversation.&lt;/p&gt;
&lt;h2 id=&#34;antimalware-scan-interface-amsi&#34;&gt;Antimalware Scan Interface (AMSI)&lt;/h2&gt;
&lt;p&gt;AMSI is a standard interface that allows applications to interact with anti-malware products installed on the system. This means is that it provides
an API for Application developers. Application developers can use the API to implement security features to make sure that the end-user is safe. According
to Microsoft, that&amp;rsquo;s why they consider Application developers as a target audience of this standard interface.&lt;/p&gt;
&lt;p&gt;The other one is Anti-malware vendors. Any anti-malware vendor can provide an interface for AMSI to work with. By doing that, they can detect a large number of malicious activities that they could not.  By default, AMSI uses Windows defender as the backing detection engine.&lt;/p&gt;
&lt;p&gt;According to Microsoft, AMSI provides the following features by default.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;User Account Control&lt;/li&gt;
&lt;li&gt;PowerShell&lt;/li&gt;
&lt;li&gt;Windows Script Host&lt;/li&gt;
&lt;li&gt;JScript &amp;amp;&amp;amp; VBScript&lt;/li&gt;
&lt;li&gt;Office VBA macros&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As it is clear from those default features, AMSI specifically provides anti-malware security mechanisms to defend against dynamic script-based malware.&lt;/p&gt;
&lt;p&gt;when running a script, even though the code is initially obfuscated, it has to be deobfuscated to go through the scripting engine. At this point, AMSI APIs can be used to scan the script and determine whether it is malicious or not.&lt;/p&gt;
&lt;p&gt;AMSI can also be useful in scenarios like invoking malicious PowerShell commands.&lt;/p&gt;
&lt;p&gt;In this article I&amp;rsquo;m going to focus on the internals of AMSI. in the next one, I&amp;rsquo;ll provide y&amp;rsquo;all with some bypass techniques.&lt;/p&gt;
&lt;h2 id=&#34;demo&#34;&gt;Demo&lt;/h2&gt;
&lt;p&gt;So let&amp;rsquo;s take SafeSploit as our example.&lt;/p&gt;
&lt;p&gt;When we run the binary, the result we get is.
&lt;img src=&#34;https://rxOred.github.io/img/CSharpLoader/AMSI.png&#34; alt=&#34;AMSI&#34;&gt;&lt;/p&gt;
&lt;p&gt;See, as we expected, PowerShell stops the execution of the program once it has detected the program is suspicious using AMSI.
So, how can we bypass this?, well before that, we have to dive deep into AMSI internals to understand how things work.&lt;/p&gt;
&lt;h2 id=&#34;amsi-internals&#34;&gt;AMSI internals&lt;/h2&gt;
&lt;p&gt;As I previously mentioned, any anti-malware vendor can become an AMSI provider and inspect data sent by applications via the AMSI interface. If the content submitted for the scan is detected as malicious, the consuming application will be alerted. In our case, Windows PowerShell uses Windows defender as the AMSI provider.
When we input a malicious command or execute a malicious program, PowerShell will pass everything to windows defender before doing any execution.
Anti-malware vendors must do all the scans and detect whether the received input is malicious or not.&lt;/p&gt;
&lt;p&gt;For application programmers to interact with the AMSI, it provides a dll called, amsi.dll. Let&amp;rsquo;s examine PowerShell from a process hacker to check whether this dll is loaded.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://rxOred.github.io/img/CSharpLoader/powershellProperties.png&#34; alt=&#34;PoweshellProperties&#34;&gt;&lt;/p&gt;
&lt;p&gt;as we can see, amsi.dll has been loaded into powershell.exe. Now, let&amp;rsquo;s take a look at this dll in-depth and see if we can find anything interesting.
Even without looking at the dll, we can think of a technique to bypass AMSI, using dll injection and impersonating several functions exported by the dll. Anyway, let&amp;rsquo;s choose the hard way, and before diving deep into disassembly, let&amp;rsquo;s examine the export table of amsi.dll.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://rxOred.github.io/img/CSharpLoader/Exports.png&#34; alt=&#34;Exports&#34;&gt;&lt;/p&gt;
&lt;p&gt;Out of the above exported functions, only two are important to us.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AmsiScanBuffer&lt;/li&gt;
&lt;li&gt;AmsiScanString&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;amsiscanbuffer&#34;&gt;AmsiScanBuffer&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/windows/win32/api/amsi/nf-amsi-amsiscanbuffer&#34;&gt;here&lt;/a&gt;, check out the documentation first. According to the MSDN and as well as the name suggests, the &lt;code&gt;AmsiScanBuffer&lt;/code&gt; function scans a buffer that is filled for malware.&lt;/p&gt;
&lt;p&gt;As MSDN says, this function returns &lt;code&gt;S_OK&lt;/code&gt; if the call is successful. However, the return value does not indicate whether the buffer is malicious. instead, the function uses an output parameter of type &lt;code&gt;AMSI_RESULT&lt;/code&gt; to send the scan results.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;enum&lt;/span&gt; AMSI_RESULT {
        AMSI_RESULT_CLEAN,
        AMSI_RESULT_NOT_DETECTED,
        AMSI_RESULT_BLOCKED_BY_ADMIN_START,
        AMSI_RESULT_BLOCKED_BY_ADMIN_END,
        AMSI_RESULT_DETECTED
    } ;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And here&amp;rsquo;s how this function looks like in disassembly.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://rxOred.github.io/img/CSharpLoader/AmsiScanBufferPrologue.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;here we can see stack pointer is stored in &lt;code&gt;r11&lt;/code&gt; register and since this is x64 _stdcall, the first four parameters are stored in rcx, rdx, r8 and r9 registers. Rest are stored in the stack. With that information, we can assume a pointer to the &lt;code&gt;AMSI_RESULT&lt;/code&gt; enum is stored in the stack.&lt;/p&gt;
&lt;p&gt;then we can see a series of comparisons around global data.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://rxOred.github.io/img/CSharpLoader/AmsiScanBuffer2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;followed by,&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://rxOred.github.io/img/CSharpLoader/AmsiScanBuffer4.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;which can be decompiled down into,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;    HRESULT &lt;span style=&#34;color:#66d9ef&#34;&gt;__stdcall&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;AmsiScanBuffer&lt;/span&gt;
    (
            HAMSICONTEXT amsiContext, 
            PVOID buffer, 
            ULONG length, 
            LPCWSTR contentName, 
            HAMSISESSION amsiSession, 
            AMSI_RESULT &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;result
    )
    {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; var;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ((handle &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;handle) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; (handle[&lt;span style=&#34;color:#ae81ff&#34;&gt;0x1c&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;))
        {
            SomeFunc(handle[&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;], buffer, lengthm amsiSession, result);
        }

        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (buffer &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; NULL &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; result &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; NULL &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; amsiContext &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; NULL &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; 
            (&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;amsiContext) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x49534D41&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; amsiContext[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt;
            amsiContext[&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;) 
        {
            var &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x80070057&lt;/span&gt;;    
        } 
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; 
        {
            &lt;span style=&#34;color:#75715e&#34;&gt;/* ################################ */&lt;/span&gt;
            var &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(amsiContext &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x10&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x18&lt;/span&gt;)();
        }
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So the function takes 6 parameters. One of which is the pointer to the &lt;code&gt;AMSI_RESULT&lt;/code&gt; structure as I explained above - &lt;code&gt;*result&lt;/code&gt;. According to MSDN, others include a buffer, which will be
scanned by the anti-malware vendor - &lt;code&gt;buffer&lt;/code&gt;, length of the buffer - &lt;code&gt;length&lt;/code&gt;, filename, URL, unique script ID - &lt;code&gt;contentName&lt;/code&gt; and a handler to the session - &lt;code&gt;HAMSISESSION&lt;/code&gt; structure.&lt;/p&gt;
&lt;p&gt;then the function does some checks against the handle, if the checks turn out to be false, it calls a random function which I haven&amp;rsquo;t analyzed, and continues the execution from the next if condition. else, it continues execution without ever calling that random function. (i named that &amp;lsquo;random function&amp;rsquo; &lt;code&gt;SomeFunc&lt;/code&gt; :3 ).&lt;/p&gt;
&lt;p&gt;then there is a pretty huge if condition, which I&amp;rsquo;m not gonna go through (read the decompiled version and understand it :3 ). And if the condition fails, we call another random function but this time, it&amp;rsquo;s not a random function. it is a function pointer that is extracted from the &lt;code&gt;amsiContext&lt;/code&gt; parameter. And I&amp;rsquo;m pretty much sure that this function pointer is some kind of a handler to the anti-malware vendor&amp;rsquo;s scanning interface.&lt;/p&gt;
&lt;p&gt;This makes sense because to call &lt;code&gt;AmsiScanBuffer&lt;/code&gt;, one has to initialize amsi with &lt;code&gt;AmsiInitialize&lt;/code&gt; and open a session if required with &lt;code&gt;AmsiOpenSession&lt;/code&gt;. And &lt;code&gt;AmsiInitialize&lt;/code&gt; returns a handler and that handler is then passed down to this function as the first parameter (amsiContext).&lt;/p&gt;
&lt;p&gt;So the conclusion is, when &lt;code&gt;AmsiInitialize&lt;/code&gt; function gets called, it initializes the anti-malware vendor, registers it, and returns a handler that contains a pointer to a registered function.&lt;code&gt;AmsiScanBuffer&lt;/code&gt; function is responsible for doing some basic checks on the handler, extracting registered function from the handler and calling it with necessary parameters.&lt;/p&gt;
&lt;h2 id=&#34;amsiscanstring&#34;&gt;AmsiScanString&lt;/h2&gt;
&lt;p&gt;this is pretty much the same as the previous function except this one scan for strings. let&amp;rsquo;s just do a small analysis on this one too for the sake of completeness.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://rxOred.github.io/img/CSharpLoader/AmsiScanString.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Function check if the string is empty or not.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://rxOred.github.io/img/CSharpLoader/AmsiScanString1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;here is how the rest of the function looks like.&lt;/p&gt;
&lt;p&gt;Without much analysis, we can clearly say that this one calls &lt;code&gt;AmsiScanString&lt;/code&gt; internally. before that, it checks whether the enum pointed by &lt;code&gt;target&lt;/code&gt; is empty.&lt;/p&gt;
&lt;p&gt;Then there is a loop that increases &lt;code&gt;rax&lt;/code&gt; register until it finds a null byte. This is a strlen. After that, &lt;code&gt;rax&lt;/code&gt; is added to &lt;code&gt;rax&lt;/code&gt; and gets compared to &lt;code&gt;r11&lt;/code&gt;, which holds value &lt;code&gt;0xFFFFFFFF&lt;/code&gt;, if the value in &lt;code&gt;rax&lt;/code&gt; is above &lt;code&gt;0xFFFFFFFF&lt;/code&gt;, it moves &lt;code&gt;0x80070057&lt;/code&gt; to &lt;code&gt;rax&lt;/code&gt; register and returns. else, it calls &lt;code&gt;AmsiScanBuffer&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;And what this function does is pretty simple. it checks if the string length is higher than some value and if yes, it returns after some random value loaded into rax, and else, it simply calls &lt;code&gt;AmsiScanBuffer&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;thats-it-kids&#34;&gt;that&amp;rsquo;s it, kids!&lt;/h2&gt;
&lt;p&gt;So yeah that&amp;rsquo;s it for now&amp;hellip; we explored AMSI in-depth in this article. In the next one, We will go through some common AMSI bypass techniques.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Identifying and Reverse engineering Linked Lists constructs</title>
      <link>https://rxOred.github.io/post/reverse-linked-lists/reverse-linked-lists/</link>
      <pubDate>Sun, 03 Oct 2021 00:49:28 +0000</pubDate>
      
      <guid>https://rxOred.github.io/post/reverse-linked-lists/reverse-linked-lists/</guid>
      <description>Oh hi. Personally, I&amp;rsquo;m not a big fan of competitive programming. Anyhow, I wanted to test my DSA skills so i started doing leetcode a week(or two ig)ago. And I spent an entire day solving some of those challenges. Eventually I came cross a medium level challege, named Reorder List. problem is pretty simple, you are given a head node of a linked list, what you have to do is kinda shuffle nodes around.</description>
      <content>&lt;p&gt;Oh hi. Personally, I&amp;rsquo;m not a big fan of competitive programming. Anyhow, I wanted to test my DSA skills so i started doing leetcode a week(or two ig)ago. And I spent an entire day solving some of those challenges. Eventually I came cross a medium level challege, named &lt;code&gt;Reorder List&lt;/code&gt;. problem is pretty simple, you are given a head node of a linked list, what you have to do is kinda shuffle nodes around.&lt;/p&gt;
&lt;p&gt;And in this article, I&amp;rsquo;m hoping to cover everything from what is a linked list, how they are implemented in assembly to solving and reversing the solution of the above problem.&lt;/p&gt;
&lt;h2 id=&#34;what-is-it-and-implementation&#34;&gt;What is it? and implementation&lt;/h2&gt;
&lt;p&gt;A linked list is a data structure. unlike an array where memory is organized linearly, nodes of linked list is scrattered around memory. Each of these nodes contains a pointer to the next node and thats how those scrattered nodes are located.&lt;/p&gt;
&lt;p&gt;Lets take a linked list which stores integers as an example&lt;/p&gt;
&lt;p&gt;Each node must contain space to store the integer and the pointer to next node. So, a connection between nodes in memory may look like this&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  0x1000                     0xabcd
  -----------------          -----------------
  |      |        |          |      |        |
  |  1   | 0xabcd | -------&amp;gt; |  3   | 0xdead | -------&amp;gt; somewhere who knows
  |      |        |          |      |        |
  -----------------          -----------------
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lets see what this looks like in code.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ListNode&lt;/span&gt; {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
         &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; value;
         ListNode &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;next;
   };
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;There&amp;rsquo;s another important part of linked lists. which is the head/tail pointers. Head and tail pointers are used to track down head and tail of the linked list. which of those two is used is totally depend on the abstract data type. For example, linked list implementation of a stack may look like this&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;   class LinkedList {
      ListNode &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;head;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; count;
   }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;with that, lets implement a stack data structure using linked lists.&lt;/p&gt;
&lt;p&gt;node&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;   class ListNode {
           &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; ln_value;
           ListNode &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;ln_next;
       public:
           ListNode(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; value)&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; ln_value(value), ln_next(nullptr) {}
           &lt;span style=&#34;color:#66d9ef&#34;&gt;inline&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; GetValue(&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ln_value; }
           &lt;span style=&#34;color:#66d9ef&#34;&gt;inline&lt;/span&gt; ListNode &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;GetNext(&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ln_next; }
           &lt;span style=&#34;color:#66d9ef&#34;&gt;inline&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; SetValue(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; value) { ln_value &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; value; }
           &lt;span style=&#34;color:#66d9ef&#34;&gt;inline&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; SetNext(ListNode &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;next) { ln_next &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; next; }
   };
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;linked list&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;   class LinkedList {
           ListNode &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;l_head;
           &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; l_item_count;
       public:
           LinkedList()&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;l_head(nullptr), l_item_count(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {}
           &lt;span style=&#34;color:#66d9ef&#34;&gt;inline&lt;/span&gt; ListNode &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;GetHead() &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; l_head; }

           &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Push(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; value)
           {
               &lt;span style=&#34;color:#75715e&#34;&gt;// however i prefer the make_shared way of doing this
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;               ListNode &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;node &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; new ListNode(value);
               &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(l_head &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; nullptr) { l_head &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; node; }
               &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
                   node&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;SetNext(l_head);
                   l_head &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; node;
               }
               l_item_count&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
           }
           &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; Pop(&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;) 
           {
               &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(l_head &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; nullptr) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
               ListNode &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;node &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; l_head;
               l_head &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; l_head&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;GetNext();
               &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; value &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; node&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;GetValue();
               delete node;
               l_item_count&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;;
               &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; value;
           }
   };
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the above implementation, we can see that the Push takes and int as an input. Then creates a node and add that node to our linked list. The head will be pointing to the lastly added node.&lt;/p&gt;
&lt;p&gt;Then the Pop method returns an int by removing the node at the head.&lt;/p&gt;
&lt;p&gt;So, now we know what a linked list is. Let&amp;rsquo;s look at the disassembly of this before approaching the above problem.&lt;/p&gt;
&lt;p&gt;here&amp;rsquo;s a main function.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;)
   {
       LinkedList li;
       &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;){
           li.Push(i);
       }
       &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; li.Pop();
       &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;(c &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) {
           printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%d&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, c);
           c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; li.Pop();
       }
   }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;implementation-in-disassembly&#34;&gt;Implementation in disassembly&lt;/h1&gt;
&lt;p&gt;So, to disassemble this snippet, Im gonna use radare since im on my linux machine rn. I ran the initial analysis, seeked to main function, and switched to the graph view.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://rxOred.github.io/img/reverse-linkedlist/newmain.png&#34; alt=&#34;main&#34;&gt;&lt;/p&gt;
&lt;p&gt;here, we can see that main function creates the stack frame and allocates space for local variables including space for our class LinkedList. Then we can see that it loads some stack address to rax register, moves it into rdi, and then call contructor for LinkedList. From that, we can assume that address loaded into rax and then into rdi as &lt;code&gt;this&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;then we can see that it sets &lt;code&gt;var_28&lt;/code&gt; to 0. this must be the snippet where we set &lt;code&gt;i&lt;/code&gt; to zero in our first for loop.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://rxOred.github.io/img/reverse-linkedlist/push.png&#34; alt=&#34;pushing&#34;&gt;&lt;/p&gt;
&lt;p&gt;then we can see var_28 is compared to 4, and if it is less or equal to 4, we are going to take the jump. this looks like the look termination part. then, next blob basically put &lt;code&gt;i&lt;/code&gt; into edx and &lt;code&gt;this&lt;/code&gt; into, rax, then we can see both of them are passed as arguements to the method &lt;code&gt;Push()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Looks familiar right? of course we wrote the damn thing. However, if you are not really into C++, this &lt;code&gt;this&lt;/code&gt; thing and methods might be not be familiar to you. In C++, a method is basically a function that belongs to an object/object. In this case, &lt;code&gt;Push&lt;/code&gt; methods belongs to &lt;code&gt;LinkedList&lt;/code&gt; class. And when calling a method, In OOP, we have to pass the pointer to an object of that class as the first arguement. this pointer is called &lt;code&gt;this&lt;/code&gt;, but you cant see this in source files because that&amp;rsquo;s some sorcery done by the compiler. Aaand in &lt;code&gt;_cdecl&lt;/code&gt; calling convention uses &lt;code&gt;rdi&lt;/code&gt; register as the first arguement. Now back to the disassembly.&lt;/p&gt;
&lt;p&gt;main function then increments &lt;code&gt;i&lt;/code&gt; by 1, and then continue to loop until i &amp;gt; 4. And when that happens main function breaks out of the loop and get into the next snippet at address &lt;code&gt;0x11b0&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://rxOred.github.io/img/reverse-linkedlist/pop.png&#34; alt=&#34;poping&#34;&gt;&lt;/p&gt;
&lt;p&gt;Here we can see the same thing but now it calls &lt;code&gt;Pop()&lt;/code&gt; method. Anyway, that 0xffffffff? thats -1. this time we are iterating until &lt;code&gt;c&lt;/code&gt; becomes -1. Aaa yes, it also calls printf with &lt;code&gt;c&lt;/code&gt; as arguement.&lt;/p&gt;
&lt;p&gt;The rest of this main function is not useful to us. So lets analyze the push method :)&lt;/p&gt;
&lt;h2 id=&#34;pushing-and-poping&#34;&gt;Pushing and Poping&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://rxOred.github.io/img/reverse-linkedlist/pushmethod.png&#34; alt=&#34;push method&#34;&gt;&lt;/p&gt;
&lt;p&gt;there&amp;rsquo;s nothing magic here, it creates a stack frame and copy the arguements into its stack. then it passes 0x10 (16) to edi register and calls &lt;code&gt;new&lt;/code&gt;. new is an operator in C++ for allocating memory. it accepts 1 arguement, which is the amount of memory we want to allocate. So, here we allcate 16 bytes :).&lt;/p&gt;
&lt;p&gt;then we see it copies rax to rbx and esi (which holds second arguement, the value we passed to Push) to eax. They are then passed to ListNode constructor. Next few lines are kinda confusing.
First &lt;code&gt;var_28&lt;/code&gt; is the this pointer and we load it to rax. In the next line, we get the value at rax (this) to, well, rax. And that value is the first member of the LinkedList object, which is, as we know from the source, &lt;code&gt;l_head&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;then it check whether it is zero or not. And if &lt;code&gt;l_head&lt;/code&gt; is not 0, we jump to &lt;code&gt;0x12d5&lt;/code&gt;. Before we get into that stub, lets analyze the other one.&lt;/p&gt;
&lt;p&gt;If head equals to 0, that means the linked list is empty. therefore, since this is the first insertion, we have to set &lt;code&gt;l_head&lt;/code&gt; to point to newly allocated &lt;code&gt;ListNode&lt;/code&gt;. In the blob, we can see the same thing. we can see that in the next two lines that rax is set to var_28(this) and rdx is set to var_18 (ListNode we just allocated). In the next line, value at rax register, &lt;code&gt;l_head&lt;/code&gt; is set to the rdx, which is the new node we allocated. :)&lt;/p&gt;
&lt;p&gt;So if head is not equal to 0, which means that head is empty and this is not the first value that has been inserted to the list. Therefore what we have to do is, set new node&amp;rsquo;s next node to &lt;code&gt;l_head&lt;/code&gt; and set &lt;code&gt;l_head&lt;/code&gt; point to newly allocated &lt;code&gt;ListNode&lt;/code&gt; :). In the stub, we can see the same thing.&lt;/p&gt;
&lt;p&gt;rax and rdx registers are loaded with var_18 and [var_28]. In the next few lines, rdi and rsi are set to the same values and passed as args to method &lt;code&gt;node-&amp;gt;SetNext()&lt;/code&gt;. Now SeNext method belongs to ListNode class and its &lt;code&gt;this&lt;/code&gt; pointer is a &lt;code&gt;ListNode&lt;/code&gt; pointer. here, in this case, rdi is set to &lt;code&gt;var_18&lt;/code&gt; and rsi, second arguement is set to &lt;code&gt;l_head&lt;/code&gt;. In the next few lines we can the same code sequence that we saw ealier. It sets &lt;code&gt;l_head&lt;/code&gt; to this new node :).&lt;/p&gt;
&lt;p&gt;then it increases &lt;code&gt;l_item_count&lt;/code&gt; and returns in the next few lines.&lt;/p&gt;
&lt;p&gt;So, that is it for Pushing :) Now lets see how Pop method looks like in assembly.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://rxOred.github.io/img/reverse-linkedlist/popmethod.png&#34; alt=&#34;pop method&#34;&gt;&lt;/p&gt;
&lt;p&gt;Well a stack frame&amp;hellip; and then Pop method sets &lt;code&gt;rdi&lt;/code&gt; to &lt;code&gt;this&lt;/code&gt;, and check if &lt;code&gt;this-&amp;gt;l_head&lt;/code&gt; is equal to null. if it is null, it moves -1 to eax (0x1316), and then jump to function epigolue and simply returns.&lt;/p&gt;
&lt;p&gt;On the other hand if head is not null, we save &lt;code&gt;l_head&lt;/code&gt; in &lt;code&gt;var_8&lt;/code&gt; (0x13d1 - 0x1324), then we load &lt;code&gt;l_head&lt;/code&gt; to rdi and call &lt;code&gt;l_head-&amp;gt;GetNext()&lt;/code&gt; method to get the next node (0x1328 - 0x1332).
In the next few lines, return value (rax) of the GetNext method is set to &lt;code&gt;l_head&lt;/code&gt;. it can be decompiled like &lt;code&gt;l_head = l_head-&amp;gt;GetNext()&lt;/code&gt;. Then it gets the node it previsouly saved in &lt;code&gt;var_8&lt;/code&gt; and calls &lt;code&gt;GetValue()&lt;/code&gt;. It also saves the return value in the stack (in var_c). then it check if the saved node is null (0x134d - 0x1354), if it it is we jump to below snippet.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://rxOred.github.io/img/reverse-linkedlist/decrease.png&#34; alt=&#34;decrease count&#34;&gt;&lt;/p&gt;
&lt;p&gt;What this stub does is, loads &lt;code&gt;[var_18] + 8&lt;/code&gt; to rax register, substract 1 from rax, tore it in edx, set edx to something like &lt;code&gt;[var_18] + 8&lt;/code&gt; and returns the value it stored at &lt;code&gt;var_c&lt;/code&gt; from &lt;code&gt;GetValue()&lt;/code&gt; call. here, &lt;code&gt;[var_18]&lt;/code&gt; is the this pointer and [var_18] + 8 means the second member of the ListNode class. which is &lt;code&gt;l_item_count&lt;/code&gt;. so as a summery we are decresing that value.&lt;/p&gt;
&lt;p&gt;if the saved node is not null, then it jumps to below stub&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://rxOred.github.io/img/reverse-linkedlist/deleteop.png&#34; alt=&#34;delete&#34;&gt;&lt;/p&gt;
&lt;p&gt;here it deletes (frees) &lt;code&gt;var_8&lt;/code&gt;, the copy of the head node.&lt;/p&gt;
&lt;p&gt;Now, from the above explaination, i assume that low level constructs of linked lists are clear to the reader.&lt;/p&gt;
&lt;h2 id=&#34;traversal&#34;&gt;Traversal&lt;/h2&gt;
&lt;p&gt;Linked list traversal is pretty simple and there is no particular method to do this. one can use recursion. But here, im gonna write a traversal method using a for loop.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;    ListNode &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;LinkedList&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;GetNodeByValue(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; value) &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt;
    {
        ListNode &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;node &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; l_head;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;(node){
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (node&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;GetValue() &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; value){
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; node;
            }
            node &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; node&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;GetNext();
        }
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; nullptr;
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;here, I have created another method, to call this i have modified the main function like shown below.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;)
    {
        LinkedList li;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;){
            li.Push(i);
        }
        &lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; node &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; li.GetNodeByValue(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;);
        printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%d&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, node&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;GetValue());
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now let&amp;rsquo;s take a look at the disassembly and try to understanding whats going on in the new method :3&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://rxOred.github.io/img/reverse-linkedlist/traversemain.png&#34; alt=&#34;prologue&#34;&gt;&lt;/p&gt;
&lt;p&gt;like any other function, this one sets up a stack frame and alloacate enough space for locals. And like any other method we have encountered so far, this one too saves rdi, which is this, in a local variable (0x1162). It also stores the arg we passed in the local &lt;code&gt;var_1c&lt;/code&gt;. &lt;code&gt;var_8&lt;/code&gt; is loaded with &lt;code&gt;l_head&lt;/code&gt; (0x1169 - 0x1170).&lt;/p&gt;
&lt;p&gt;then that stub jumps into &lt;code&gt;0x11a2&lt;/code&gt;. there, it compares &lt;code&gt;var_8&lt;/code&gt; with 0. if it is 0, the jump is taken to &lt;code&gt;0x11a9&lt;/code&gt;, else it continues execution on &lt;code&gt;0x1176&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://rxOred.github.io/img/reverse-linkedlist/jumps.png&#34; alt=&#34;jumps&#34;&gt;&lt;/p&gt;
&lt;p&gt;in the stub starts at address &lt;code&gt;0x11a9&lt;/code&gt;, we can see that &lt;code&gt;var_8&lt;/code&gt; is loaded into rdi and then passed into &lt;code&gt;var_8-&amp;gt;GetValue()&lt;/code&gt; method and compares return valeue in &lt;code&gt;var_1c&lt;/code&gt;. next we can see a &lt;code&gt;sete&lt;/code&gt; instruction, which sets al to 1 if zero flag is set (if &lt;code&gt;var_1c == var_8-&amp;gt;GetValue()&lt;/code&gt;). then it compares al register with 0 (0x1188). if &lt;code&gt;test&lt;/code&gt; instruction sets 0 flag, which means, &lt;code&gt;al == 0&lt;/code&gt; and therefore &lt;code&gt;var_1c != var_8-&amp;gt;GetValue()&lt;/code&gt; and program takes the jump to &lt;code&gt;0x1192&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;otherwise, if result of the test instruction does not set zero flag, which means, &lt;code&gt;var_1c == var_8-&amp;gt;GetValue()&lt;/code&gt;, program continues execution from &lt;code&gt;0x118c&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://rxOred.github.io/img/reverse-linkedlist/loopjmp.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;in &lt;code&gt;0x118c&lt;/code&gt;, rax is loaded with a pointer to the current node, and then it jumps to &lt;code&gt;0x11ae&lt;/code&gt; and leaves. in &lt;code&gt;0x1192&lt;/code&gt;, we call &lt;code&gt;var_8-&amp;gt;GetNext()&lt;/code&gt; and jump back to &lt;code&gt;0x11a2&lt;/code&gt; to continue the loop.&lt;/p&gt;
&lt;p&gt;And that is it for the traversal part.&lt;/p&gt;
&lt;p&gt;Now let&amp;rsquo;s solve the above leetcode problem.&lt;/p&gt;
&lt;h2 id=&#34;solution-to-the-problem&#34;&gt;Solution to the problem&lt;/h2&gt;
&lt;p&gt;As previsouly mentioned, the problem is about mixing up nodes in the given linked list. for example,&lt;/p&gt;
&lt;p&gt;if given a linked list like this,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    [1] -&amp;gt; [2] -&amp;gt; [3] -&amp;gt; [4] -&amp;gt; [5]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;you have to generate this&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    [1] -&amp;gt; [5] -&amp;gt; [2] -&amp;gt; [4] -&amp;gt; [3]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Well it is bit hard at first if you think enough, its easy. Think about it like, this,&lt;/p&gt;
&lt;p&gt;First node should be the 1st node, second node shoud be the n-1 th node, third node should be the 2nd node and fourth node should be n-2 th node and so on. And from that it is clear that we should use 2 pointers, one pointing to the first node and another one pointing to the last node. Then by interating each one of them from both first start and end, we can get the disired output.&lt;/p&gt;
&lt;p&gt;consider the below example&lt;/p&gt;
&lt;p&gt;1st iteration&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    [1] -&amp;gt; [2] -&amp;gt; [3] -&amp;gt; [4] -&amp;gt; [5]

     ^                           ^
     |                           |
     |                           |
    1st pointer             2nd pointer
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;2nd iteration&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    [1] -&amp;gt; [2] -&amp;gt; [3] -&amp;gt; [4] -&amp;gt; [5]

            ^             ^
            |             |
            |             |

           1st           2nd 
         pointer        pointer
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;3rd iteration&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    [1] -&amp;gt; [2] -&amp;gt; [3] -&amp;gt; [4] -&amp;gt; [5]

                   ^
                   |
                   |
                1st &amp;amp; 2nd
                 pointers
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, the thing is, what will happen after 3rd iteration?&lt;/p&gt;
&lt;p&gt;well, if you continue the iteration, it will go through the nodes that we already used. So to solve this problem, we can device the linekd list into two parts. like shown below.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    [1] -&amp;gt; [2] -&amp;gt; [3] -&amp;gt; NULL  [4] -&amp;gt; [5]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So how can we do that? how can we seperate the linked list?. The easiest way I can think of is to use pointers, starting with the 1st node, increase 1st pointer by 1 node while iterating the second node by 2 nodes. consider the below example.&lt;/p&gt;
&lt;p&gt;1st iteration&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    [1] -&amp;gt; [2] -&amp;gt; [3] -&amp;gt; [4] -&amp;gt; [5]

     ^
     |
     |
  1st / 2nd
  pointer
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;2nd iteration&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    [1] -&amp;gt; [2] -&amp;gt; [3] -&amp;gt; [4] -&amp;gt; [5]

            ^      ^
            |      |
            |      |
          1st     2nd
         pointer  pointer
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;3rd iteration&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    [1] -&amp;gt; [2] -&amp;gt; [3] -&amp;gt; [4] -&amp;gt; [5]

                   ^            ^
                   |            |
                   |            |
                 1st           2nd 
                 pointer      pointer
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;See?, now we can set the next node of the node pointed by 1st node to null.&lt;/p&gt;
&lt;p&gt;Eventhough we seperated the list, there is another problem we have to face. Some of you may have already noticed that. There is no way we can reach previous nodes from the second list since each node is pointing to the next node. So we have to reverse the second linekd list too.&lt;/p&gt;
&lt;p&gt;Here is what we should do to re-order the linked list.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Seperate the list into two lists.&lt;/li&gt;
&lt;li&gt;Reverse the second list&lt;/li&gt;
&lt;li&gt;Start iteration from the first node of the fist list and first node of the second list(reversed list)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here is the implementation.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ReorderList&lt;/span&gt;(ListNode &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;head)
    {
        &lt;span style=&#34;color:#75715e&#34;&gt;/* seperating the list */&lt;/span&gt;
        ListNode &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;f &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; head, &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;l &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; head;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;(l &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; nullptr &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; l&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;GetNext() &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; nullptr){
            f &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; f&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;GetNext();
            l &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; l&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;GetNext()&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;GetNext();
        }

        &lt;span style=&#34;color:#75715e&#34;&gt;/* saving the first node of second list */&lt;/span&gt;
        ListNode &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;node &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; f&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;GetNext();
        f&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;SetNext(nullptr);

        &lt;span style=&#34;color:#75715e&#34;&gt;/* reversing the second list */&lt;/span&gt;
        ListNode &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;prev &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nullptr;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;(node &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; nullptr) {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; nnode &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; node&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;GetNext();
            node&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;SetNext(prev);
            prev &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; node;
            node &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nnode;
        }

        &lt;span style=&#34;color:#75715e&#34;&gt;/* re ordering lists */&lt;/span&gt;
        ListNode &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;start &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; head;
        ListNode &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;end &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; prev;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (start &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; nullptr &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; end &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; nullptr) {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; nnode &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; start&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;GetNext();
            start&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;SetNext(end);
            &lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; ennode &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; end&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;GetNext();
            end&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;SetNext(nnode);
            start &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nnode;
            end &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ennode;
        }
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;main function&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;)
    {
        LinkedList li;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;){
            li.Push(i);
            printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%d &amp;#34;&lt;/span&gt;, i);
        }

        ReorderList(li.GetHead());

        putchar(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;);
        &lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; li.Pop();
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (c &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) {
            printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%d &amp;#34;&lt;/span&gt;, c);
            c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; li.Pop();
        }
        putchar(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;);
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;reverse-engineering-the-solution&#34;&gt;Reverse engineering the solution&lt;/h2&gt;
&lt;p&gt;Now its time to see how the solution code looks like in assembly :).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://rxOred.github.io/img/reverse-linkedlist/reorder.png&#34; alt=&#34;re order list&#34;&gt;&lt;/p&gt;
&lt;p&gt;oh look at those cute little variable name that radare has analyzed for us. Same as the ones that we used in our code right?. Well i compiled it with -g flag this time hehe :3&lt;/p&gt;
&lt;p&gt;Anyway, in above stub, we set &lt;code&gt;f&lt;/code&gt; and &lt;code&gt;l&lt;/code&gt; with &lt;code&gt;head&lt;/code&gt; (rdi) and jump to &lt;code&gt;0x1216&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://rxOred.github.io/img/reverse-linkedlist/reorder-jmp.png&#34; alt=&#34;0x1216&#34;&gt;&lt;/p&gt;
&lt;p&gt;this is just a simple comparison, the stub compares &lt;code&gt;l&lt;/code&gt; with 0 and jumps to &lt;code&gt;0x1235&lt;/code&gt; if comparison yeilds zero.&lt;/p&gt;
&lt;p&gt;else we jump to below stub&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://rxOred.github.io/img/reverse-linkedlist/comparefalse.png&#34; alt=&#34;0x121d&#34;&gt;&lt;/p&gt;
&lt;p&gt;there we call &lt;code&gt;l-&amp;gt;GetNext()&lt;/code&gt; and check if the return value is null. if it is null, it jumps to &lt;code&gt;0x1235&lt;/code&gt;. else, to &lt;code&gt;0x122e&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://rxOred.github.io/img/reverse-linkedlist/1235.png&#34; alt=&#34;0x1235&#34;&gt;&lt;/p&gt;
&lt;p&gt;both of above snippets does nothing but jump to &lt;code&gt;0x123a&lt;/code&gt;. Oh, &lt;code&gt;0x122e&lt;/code&gt; set eax to 1.&lt;/p&gt;
&lt;p&gt;In &lt;code&gt;0x123a&lt;/code&gt;, there is a &lt;code&gt;test al, al&lt;/code&gt; instruction which checks if any of the above comparisons leads to a null, which means if &lt;code&gt;l == null&lt;/code&gt; or &lt;code&gt;l-&amp;gt;GetNext() == null&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;if not, a jump will not be taken and execution will continue to &lt;code&gt;0x11ee&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://rxOred.github.io/img/reverse-linkedlist/11ee.png&#34; alt=&#34;0x11ee&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;0x11ee&lt;/code&gt; calls &lt;code&gt;f-&amp;gt;GetNext()&lt;/code&gt; (0x11ee - 0x11f5) and stores resulting value at &lt;code&gt;f&lt;/code&gt;. So it basically does &lt;code&gt;f = f-&amp;gt;GetNext()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;then at address &lt;code&gt;0x11fe&lt;/code&gt;, we can see &lt;code&gt;l&lt;/code&gt; is copied to rax, which is then passed to &lt;code&gt;GetNext()&lt;/code&gt; method as this parameter. return value &lt;code&gt;GetNext()&lt;/code&gt; is then passed as this parameter to the &lt;code&gt;GetNext&lt;/code&gt; method and &lt;code&gt;l&lt;/code&gt; is assigned with the return value. So the whole thing can be represented as &lt;code&gt;l = l-&amp;gt;GetNext()-&amp;gt;GetNext()&lt;/code&gt;. then it continues to loop until &lt;code&gt;l&lt;/code&gt; or &lt;code&gt;l-&amp;gt;GetNext()&lt;/code&gt; is nullptr.&lt;/p&gt;
&lt;p&gt;if any of above comparisons become null, loop ends and jump at &lt;code&gt;0x123c&lt;/code&gt; wont be taken. &lt;code&gt;node&lt;/code&gt; is assigned with &lt;code&gt;f-&amp;gt;GetNext()&lt;/code&gt; (0x123e - 0x124a). then rsi is loaded with 0 (or null). Then rdi is assigned with rax, which is &lt;code&gt;f&lt;/code&gt;. then there is a call to &lt;code&gt;SetNext()&lt;/code&gt;. So the function may look like this in C. &lt;code&gt;f-&amp;gt;SetNext(NULL)&lt;/code&gt;. Then we can see &lt;code&gt;prev&lt;/code&gt; is assigned with 0 following a jump to &lt;code&gt;0x129c&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://rxOred.github.io/img/reverse-linkedlist/0x1239.png&#34; alt=&#34;0x129c&#34;&gt;&lt;/p&gt;
&lt;p&gt;instruction at address &lt;code&gt;0x129c&lt;/code&gt; check whether &lt;code&gt;node&lt;/code&gt; is null. if it is not, jump is taken to &lt;code&gt;0x1269&lt;/code&gt;. first 4 lines call &lt;code&gt;node-&amp;gt;GetNext()&lt;/code&gt; and save return value in &lt;code&gt;var_8&lt;/code&gt;. then node&amp;rsquo;s next is set to &lt;code&gt;prev&lt;/code&gt;. remember? which is intially null (0x1279 - 0x1287). And from 0x128c to 0x1298, it simply sets &lt;code&gt;prev&lt;/code&gt; to &lt;code&gt;node&lt;/code&gt; and &lt;code&gt;var_8&lt;/code&gt; (node-&amp;gt;GetNext()) to &lt;code&gt;node&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;the loop continues until &lt;code&gt;node == null&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;When the termination condition is met, rip will get to &lt;code&gt;0x12a3&lt;/code&gt;, where it assignes &lt;code&gt;start&lt;/code&gt; with head and &lt;code&gt;prev&lt;/code&gt; with &lt;code&gt;end&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://rxOred.github.io/img/reverse-linkedlist/1111.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;then there is this series of comparisons. first one compares &lt;code&gt;start&lt;/code&gt; with 0 and the next one compares &lt;code&gt;end&lt;/code&gt; with 0. And if any of them is 0 (or null), it jumps to &lt;code&gt;0x1319&lt;/code&gt; and exits.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://rxOred.github.io/img/reverse-linkedlist/1223.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;from address &lt;code&gt;0x12b5&lt;/code&gt; to &lt;code&gt;0x12c1&lt;/code&gt;, what the code does is it simply gets next node of the &lt;code&gt;start&lt;/code&gt; and move it to &lt;code&gt;nnode&lt;/code&gt;. from &lt;code&gt;0x12c5&lt;/code&gt; to &lt;code&gt;0x12d3&lt;/code&gt;, code sets &lt;code&gt;start&lt;/code&gt;&amp;rsquo;s next node to &lt;code&gt;end&lt;/code&gt; using &lt;code&gt;start-&amp;gt;SetNext(end)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;next, rdi is loaded with end and passed to &lt;code&gt;GetNext()&lt;/code&gt; method and the return value is stored in &lt;code&gt;ennode&lt;/code&gt;. In the next few lines, &lt;code&gt;nnode&lt;/code&gt; and &lt;code&gt;end&lt;/code&gt; are loaded into rsi and rdi. then they are passed down to SetNext() method, which may look like this &lt;code&gt;end-&amp;gt;SetNext(nnode)&lt;/code&gt;. then we can see &lt;code&gt;start&lt;/code&gt; is assigned with &lt;code&gt;nnode&lt;/code&gt; and &lt;code&gt;end&lt;/code&gt; is assigned with &lt;code&gt;ennode&lt;/code&gt; and continue to loop until termination condition is met, &lt;code&gt;start == nullptr || end == nullptr&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;and yeap that&amp;rsquo;s it. First it saves next nodes of the &lt;code&gt;start&lt;/code&gt; and the &lt;code&gt;end&lt;/code&gt; in two locals named &lt;code&gt;nnode&lt;/code&gt; and &lt;code&gt;ennode&lt;/code&gt;. then &lt;code&gt;Start&lt;/code&gt; node&amp;rsquo;s next is set to &lt;code&gt;end&lt;/code&gt; and its next is set to &lt;code&gt;nnode&lt;/code&gt; (prev next node of the &lt;code&gt;start&lt;/code&gt;). Then &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;end&lt;/code&gt; are set to &lt;code&gt;nnode&lt;/code&gt; and &lt;code&gt;ennode&lt;/code&gt; to continue the loop :).&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;loop:
    if start == null or end == null:
        return
    nnode   &amp;lt;--- save start-&amp;gt;GetNext()
    ennode  &amp;lt;--- save end-&amp;gt;GetNext()
    set start-&amp;gt;next = end
    set end-&amp;gt;next   = nnode
    set start = nnode
    set end   = ennode
    jump loop
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;the-end&#34;&gt;THE END&lt;/h2&gt;
&lt;p&gt;Soooo yeaaaah, Oh mmy freaking god i spent two days writing this damn article. I guess that is it. I hope yall understood what i did here :3&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Practical Reverse Engineering Answers 2 - sample_J DllMain</title>
      <link>https://rxOred.github.io/post/practical-re/practical-re-answers2/</link>
      <pubDate>Sat, 02 Oct 2021 00:40:06 +0000</pubDate>
      
      <guid>https://rxOred.github.io/post/practical-re/practical-re-answers2/</guid>
      <description>So last time we finished some exercises from the book pratical reverse engineering. Now, we have page 35 exercises. I wont cover exercise here because some are really straight forward.
without useless intros lets get started.
Chaper 1, page 35 We are starting with the second one, because first one is pretty easy. 2nd question asks us to decompile DllMain.
as we can see, IDA has generated us some information of the stack as well as a nice graph view.</description>
      <content>&lt;p&gt;So last time we finished some exercises from the book pratical reverse engineering. Now, we have page 35 exercises. I wont cover exercise here because some are really straight forward.&lt;/p&gt;
&lt;p&gt;without useless intros lets get started.&lt;/p&gt;
&lt;h1 id=&#34;chaper-1-page-35&#34;&gt;Chaper 1, page 35&lt;/h1&gt;
&lt;p&gt;We are starting with the second one, because first one is pretty easy. 2nd question asks us to decompile DllMain.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://rxOred.github.io/img/dllmain.png&#34; alt=&#34;dllmain, DllMain&#34;&gt;&lt;/p&gt;
&lt;p&gt;as we can see, IDA has generated us some information of the stack as well as a nice graph view. From that, we can decompile it down to,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;   BOOL &lt;span style=&#34;color:#66d9ef&#34;&gt;__stdcall&lt;/span&gt; APIENTRY &lt;span style=&#34;color:#a6e22e&#34;&gt;DllMain&lt;/span&gt;(HMODULE &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;hModule, 
                           DWORD ul_reason_for_call, 
                           LPVOID lpReserved)
   {
      IDTR idtr;
      PROCESSENTRY32 pe;
      HANDLE handle;
   }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://rxOred.github.io/img/sidt.png&#34; alt=&#34;prologue&#34;&gt;&lt;/p&gt;
&lt;p&gt;next we can the function prologue, where stack frame is initialized. using &lt;code&gt;sub esp, 130h&lt;/code&gt; instruction, we can confirm that stack will be 0x130 bytes large. next we can see a &lt;code&gt;sidt fword[ebp+idtr]&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;if you have some low level debugging/development experience, you might know what &lt;code&gt;sidt&lt;/code&gt; does. in case you dont, it reads idtr register to the operand location. in this case, &lt;code&gt;fword[ebp+idr]&lt;/code&gt;will be filled with idtr register. So whats this idtr register? well, idtr register is a 6byte sized register. it stores length of the interrupt desciptor table in the last 2 bytes and base of interrupt desciptor table in the top 4 bytes. Now, how can we call &lt;code&gt;sidt&lt;/code&gt; from C/C++?&lt;/p&gt;
&lt;p&gt;before that, here we build the idtr structure&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; idtr {
      DWORD idt_base;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;short&lt;/span&gt; idt_size;
   } IDTR, &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;PIDTR;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;inside DllMain we do this.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;   IDTR idtr;
   __sidt(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;idtr);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;then DllMain compares &lt;code&gt;idtr+2&lt;/code&gt; with some 2 random hex values that looks like memory addresses. Using the above explaination, it is pretty clear that whoever wrote this malware compares base address of interrupt desciptor table with 2 hardcoded memory addresses, first as we can see in the above image, 0x8003f400 and 0x80047400 in the below image. Tbh, this is bad. Reason is that, in multi core processors each core gets a different base address for interrupt desciptor table. And when using hardcoded addresses&amp;hellip; Anyway. lets decompile that part too.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://rxOred.github.io/img/checkidt.png&#34; alt=&#34;idt address range&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (idtr.idt_base &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x8003f400&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; idtr.idt_base &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x80047400&lt;/span&gt;){
      &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; FALSE;
   }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;From above snippet it is clear that it does check for some range. looks like it validates IDT base&amp;hellip;&lt;/p&gt;
&lt;p&gt;After the comparision if the range requirements are satisfied, we can see that DllMain creates a snapshot of all the running processes.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://rxOred.github.io/img/snapshot.png&#34; alt=&#34;CreateToolhelp32Snapshot&#34;&gt;&lt;/p&gt;
&lt;p&gt;we can decompile that stub into&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;   handle &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
   &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (handle &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; INVALID_HANDLE_VALUE) {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; FALSE;
   }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;it also zero out &lt;code&gt;pe&lt;/code&gt; using &lt;code&gt;stosd&lt;/code&gt; instruction.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;   memset(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;pe.cntUsage, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x49&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Next, DllMain calls &lt;code&gt;Process32First&lt;/code&gt; with arguements &lt;code&gt;&amp;amp;pe&lt;/code&gt;(eax) and &lt;code&gt;handle&lt;/code&gt;(edi), a string comparison with &lt;code&gt;explorer.exe&lt;/code&gt; and then if comparison fails, we can see a call to &lt;code&gt;Process32Next&lt;/code&gt;.
Basically this stub go through each process of the snapshot until it finds &lt;code&gt;explorer.exe&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://rxOred.github.io/img/getexplorer.png&#34; alt=&#34;Process32First&#34;&gt;&lt;/p&gt;
&lt;p&gt;decompiled version of that stub may look like&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;   pe.dwSize &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(PROCESSENTRY32);
   &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (Process32First(handle, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;pe) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
      &lt;span style=&#34;color:#75715e&#34;&gt;// code here
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;   }
   &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (Process32Next(handle, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;pe) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
         &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (wcscmp(pe.szExeFile, &lt;span style=&#34;color:#e6db74&#34;&gt;L&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;explorer.exe&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
            &lt;span style=&#34;color:#75715e&#34;&gt;// code here
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;         }
         &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;;
      }
      &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; FALSE;
   }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once it found the explorer.exe, it compares the process&amp;rsquo;s pid to it&amp;rsquo;s parents pid.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://rxOred.github.io/img/checkpid.png&#34; alt=&#34;check process ids&#34;&gt;&lt;/p&gt;
&lt;p&gt;here if they are equal, we simply exit out.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://rxOred.github.io/img/exit.png&#34; alt=&#34;exit&#34;&gt;&lt;/p&gt;
&lt;p&gt;else, we create a thread in the current virtual memory space with start address set to &lt;code&gt;0x100032d0&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://rxOred.github.io/img/evil.png&#34; alt=&#34;evil stuff&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;   do_evil_stuff:
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (pe.th32ParentProcessID &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; pe.th32ProcessID) {
         &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; FALSE;
      }
      &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
         &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (ul_reason_for_call &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; DLL_PROCESS_ACCESS) {
            CreateThread(
               NULL, NULL, (LPTHREAD_START_ROUTINE)&lt;span style=&#34;color:#ae81ff&#34;&gt;0x100032d0&lt;/span&gt;, NULL, NULL, NULL
            );
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; TRUE;
         }
         &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; TRUE:
      }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;with that info, we can fill out the stub that searches for explorer.exe like this&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;   pe.dwSize &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(PROCESSENTRY32);
   &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (Process32First(handle, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;pe) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (wcscmp(pe.szExeFile, &lt;span style=&#34;color:#e6db74&#34;&gt;L&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;explorer.exe&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
         &lt;span style=&#34;color:#66d9ef&#34;&gt;goto&lt;/span&gt; do_evil_stuff;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
         &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (Process32Next(handle, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;pe) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (wcscmp(pe.szExeFile, &lt;span style=&#34;color:#e6db74&#34;&gt;L&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;explorer.exe&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
               &lt;span style=&#34;color:#66d9ef&#34;&gt;goto&lt;/span&gt; do_evil_stuff;
            }
            &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;;
         }
         &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; FALSE;
      }
   }

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;combining all into a single stub, we will get something like this as the DllMain&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; idtr {
      DWORD idt_base;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;short&lt;/span&gt; idt_size;
   } IDTR, &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;PIDTR;

   BOOL &lt;span style=&#34;color:#66d9ef&#34;&gt;__stdcall&lt;/span&gt; APIENTRY &lt;span style=&#34;color:#a6e22e&#34;&gt;DllMain&lt;/span&gt;(HMODULE &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;hModule, 
                           DWORD ul_reason_for_call, 
                           LPVOID lpReserved)
   {
      IDTR idtr;
      PROCESSENTRY32 pe;
      HANDLE handle;

      __sidt(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;idtr);
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (idtr.idt_base &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x80047400&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; idtr.idt_base &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x8003f400&lt;/span&gt;){
         &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; FALSE;
      }

      handle &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (handle &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; INVALID_HANDLE_VALUE) {
         &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; FALSE;
      }
      memset(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;pe.cntUsage, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x49&lt;/span&gt;);
      pe.dwSize &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(PROCESSENTRY32);
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (Process32First(handle, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;pe) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
         &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (wcscmp(pe.szExeFile, &lt;span style=&#34;color:#e6db74&#34;&gt;L&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;explorer.exe&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;goto&lt;/span&gt; do_evil_stuff;
         &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (Process32Next(handle, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;pe) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
               &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (wcscmp(pe.szExeFile, &lt;span style=&#34;color:#e6db74&#34;&gt;L&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;explorer.exe&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
                  &lt;span style=&#34;color:#66d9ef&#34;&gt;goto&lt;/span&gt; do_evil_stuff;
               }
               &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;;
            }
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; FALSE;
         }
      }

   do_evil_stuff:
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (pe.th32ParentProcessID &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; pe.th32ProcessID) {
         &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; FALSE;
      }
      &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
         &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (ul_reason_for_call &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; DLL_PROCESS_ACCESS) {
            CreateThread(
               NULL, NULL, (LPTHREAD_START_ROUTINE)&lt;span style=&#34;color:#ae81ff&#34;&gt;0x100032d0&lt;/span&gt;, NULL, NULL, NULL
            );
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; TRUE;
         }
         &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; TRUE:
      }
   }

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
    </item>
    
    <item>
      <title>Practical Reverse Engineering Answers</title>
      <link>https://rxOred.github.io/post/practical-re/practical-re-answers/</link>
      <pubDate>Wed, 29 Sep 2021 09:46:25 +0000</pubDate>
      
      <guid>https://rxOred.github.io/post/practical-re/practical-re-answers/</guid>
      <description>Introduction Hello, rxOred here, with another badly written write-up.
A years ago, i started reading practical reverse engineering book. Eventhough I was familiar with most of those concepts, that book&amp;rsquo;s exercises were pretty challenging. Aand guess what, there were no solutions to those Exercises in the book. Authors have encouraged RE community to share solutions with others using their blogs, r/reverse-egnineering etc.
At that time, i never really wanted to create a blog.</description>
      <content>&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;Hello, rxOred here, with another badly written write-up.&lt;/p&gt;
&lt;p&gt;A years ago, i started reading practical reverse engineering book. Eventhough I was familiar with most of those concepts,
that book&amp;rsquo;s exercises were pretty challenging.
Aand guess what, there were no solutions to those Exercises in the book. Authors have encouraged RE community to share
solutions with others using their blogs, r/reverse-egnineering etc.&lt;/p&gt;
&lt;p&gt;At that time, i never really wanted to create a blog. however while doing those challenges, i have wrote
some, not-very-detailed explainations. So, i will be sharing those stuff with yall.
This 2 part series post will provide some solutions for Exercises in chapter 1, which is about x86.&lt;/p&gt;
&lt;h1 id=&#34;chapter-1-page-11&#34;&gt;Chapter 1, page 11&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;4 bytes (32 bits). makes sense right? if you have read the whole snippet, line 5 is a,
repne scasb
intel indentifies these instructions as string operation instructions. which is perfectly fine.About scasb,
scasb/scasw/scasd instructions compare al/ax/eax with value at memory address specified in edi. rep is a prefix.
it is used for repeating same thing. So the what the whole instruction does is, it compares al (because scas&amp;rsquo;b&#39;)
with whatever value at memory address specified in edi while increasing edi by 1 until the byte is found in the
buffer or ecx == 0. so as for our answer, it is 4 bytes because since edi is an memory address, memory addresses in
x86 takes upto 4bytes :)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;1 byte
rep stosb
this instruction is used to initialize a buffer with some value (like memset). edi should contain the address of
buffer, and since its a stos&amp;rsquo;b&#39;, which is the indication of byte, al contain the value that the buffer should be
assigned with. So from that, it is clear that ebp+c, second argument to the function is sizeof byte:)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;What the snippet does is pretty simple, in line 1, edi is assigned with ebp+8 (first arg), which we concluded as a
memory address. next line, we can see that its saving that address in edx followed by a xor eax, eax, which clears
out eax register. In line 4, ecx is ored(did i spell that correct?) with 0xffffffff. result of this operation is,
well, 0xffffffff because anything | 1 results in a 1.&lt;/p&gt;
&lt;p&gt;then we have what we discussed in 1), repe scasb. I won&amp;rsquo;t explain it again ew.&lt;/p&gt;
&lt;p&gt;So next we have some add ecx, 2, which, as anyone can guess, adds 2 to ecx. Followed by a negation. then we have a
mov  al, ebp+c, which moves our byte into al register. then edi is assigned with edx, where we saved our edi before.
Then we have what we discussed in 2).&lt;/p&gt;
&lt;p&gt;So what this basically does is, it compares 0 with whatever at memory address edi until 0 is found in the
buffer while decrementing ecx. then we set ecx + 2, then we negate it to get the string len, then we write [ebp-c]
to [edi] byte by byte :3&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;chapter-1-page-17&#34;&gt;Chapter 1, page 17&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;So, in this exercise we want to write a program that reads instruction pointer :3. here we go&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-nasm&#34; data-lang=&#34;nasm&#34;&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;; here we are reading address of the instruction after the call instruction.&lt;/span&gt;
   readeip: &lt;span style=&#34;color:#a6e22e&#34;&gt;call&lt;/span&gt;     lbl         &lt;span style=&#34;color:#75715e&#34;&gt;; call lbl, this pushes address of next instruction to the stack&lt;/span&gt;
            &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;      ebx, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
            &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;      eax, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
            &lt;span style=&#34;color:#a6e22e&#34;&gt;int&lt;/span&gt;      &lt;span style=&#34;color:#ae81ff&#34;&gt;0x80&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;; exit&lt;/span&gt;

   lbl:     &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;      eax, [esp]  &lt;span style=&#34;color:#75715e&#34;&gt;; we read value at esp to eax. which is the return address.&lt;/span&gt;
            &lt;span style=&#34;color:#a6e22e&#34;&gt;ret&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Next we have to set eip to 0xAABBCCDD&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-nasm&#34; data-lang=&#34;nasm&#34;&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;; 1. here we when we call, return address is pushed to stack&lt;/span&gt;
   writeeip:   &lt;span style=&#34;color:#a6e22e&#34;&gt;call&lt;/span&gt;  write
               &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;   ebx,  &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
               &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;   eax,  &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
               &lt;span style=&#34;color:#a6e22e&#34;&gt;int&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;0x80&lt;/span&gt;

   &lt;span style=&#34;color:#75715e&#34;&gt;; 2. we then modify the value at stack to 0xAABBCCDD&lt;/span&gt;
   write:      &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;   [esp], &lt;span style=&#34;color:#ae81ff&#34;&gt;0xAABBCCDD&lt;/span&gt;
               &lt;span style=&#34;color:#a6e22e&#34;&gt;ret&lt;/span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;; cause a segfault&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-nasm&#34; data-lang=&#34;nasm&#34;&gt;   writeeip:   &lt;span style=&#34;color:#a6e22e&#34;&gt;call&lt;/span&gt;  write

   &lt;span style=&#34;color:#75715e&#34;&gt;; remember, ret just pops whatever at esp to eip&lt;/span&gt;
   write:      &lt;span style=&#34;color:#a6e22e&#34;&gt;push&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;0xAABBCCDD&lt;/span&gt;
               &lt;span style=&#34;color:#a6e22e&#34;&gt;ret&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-nasm&#34; data-lang=&#34;nasm&#34;&gt;   writeeip: &lt;span style=&#34;color:#a6e22e&#34;&gt;jmp&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;0xAABBCCDD&lt;/span&gt;
   &lt;span style=&#34;color:#75715e&#34;&gt;;yeaup simple as that&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-nasm&#34; data-lang=&#34;nasm&#34;&gt;   writeeip: &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;     eax, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xAABBCCDD&lt;/span&gt;
             &lt;span style=&#34;color:#a6e22e&#34;&gt;call&lt;/span&gt;    eax
   &lt;span style=&#34;color:#75715e&#34;&gt;; this is bit important. lot of malware authors use this method to access win32 APIs&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;same thing that happened to many of above snippets ?. it will crash with a seg fault. The reason is that, we are returning to
a totally unknown address.
In this case we havent pushed anything to the stack other than return address and base pointer of the prev stack frame. and when ret pops the value from stack to eip, and what we get is base of the previous
stack frame. Guess what? stack is non-executable :3&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  --------------------------
           eax (y)
  --------------------------
           ecx (x)
  --------------------------
        (return addr)
  --------------------------
             ebp             &amp;lt;------- esp
  --------------------------
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;edx:eax will be used.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;the-end&#34;&gt;THE-END&lt;/h1&gt;
&lt;p&gt;In the next article, we will go through the last exercise :) Until then!&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Compilers 101 - The front end</title>
      <link>https://rxOred.github.io/post/compilers/compilers01/</link>
      <pubDate>Tue, 28 Sep 2021 22:58:02 +0000</pubDate>
      
      <guid>https://rxOred.github.io/post/compilers/compilers01/</guid>
      <description>Compilers This article is all about compilers.
For many people, a compiler is a mystery. for them, it is like a magical black box that takes the source file as an input and generates a binary file that can be executed.
However, the truth to be told, compilers are not wizards. In this article, we will start from the introduction to the front-end of a compiler from a reverse-engineering perspective.</description>
      <content>&lt;h1 id=&#34;compilers&#34;&gt;Compilers&lt;/h1&gt;
&lt;p&gt;This article is all about compilers.&lt;/p&gt;
&lt;p&gt;For many people, a compiler is a mystery. for them, it is like a magical black box that takes the source file as an input and generates a binary file that can be executed.&lt;/p&gt;
&lt;p&gt;However, the truth to be told, compilers are not wizards. In this article, we will start from the introduction to the front-end of a compiler from a reverse-engineering perspective.&lt;/p&gt;
&lt;p&gt;The next articles will contain detailed explanations of the optimizer and the back-end.&lt;/p&gt;
&lt;h2 id=&#34;what-is-a-compiler-and-how-does-it-affect-the-reverse-engineering-process&#34;&gt;What is a compiler and how does it affect the reverse engineering process.&lt;/h2&gt;
&lt;p&gt;A compiler is a very complex piece of software, and what it essentially does is, taking one representation of a program as an input and generating a representation of the same program.&lt;/p&gt;
&lt;p&gt;This input representation is usually the text file containing the source code that complies with the specifications of a specific high-level language. And the&lt;/p&gt;
&lt;p&gt;Output is usually a low-level language representation of the same program.&lt;/p&gt;
&lt;p&gt;Sounds not that complex right? Well, this is just a high-level overview. During this process of translation between different representations, the input source will have to face many algorithms, techniques employed by the compiler to optimize the low-level representation it generates. These algorithms may add more levels of complexity on top of the original code.&lt;/p&gt;
&lt;p&gt;And may even contain code that the developer is not intended of writing. These things make it harder for someone to read the compiler-generated code.&lt;/p&gt;
&lt;h2 id=&#34;compiler-architecture&#34;&gt;Compiler architecture.&lt;/h2&gt;
&lt;p&gt;Compiler architecture mainly consists of 3 things&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- Front end
- Optimizer
- Back end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I this first article, let&amp;rsquo;s dive into the Front end.&lt;/p&gt;
&lt;h2 id=&#34;the-front-end&#34;&gt;The front end.&lt;/h2&gt;
&lt;p&gt;tbh, the front is the least important out of the above 3 in a reverse engineering perspective. anyway&amp;hellip;&lt;/p&gt;
&lt;p&gt;So what does this thing do? well, the front end is the place where the process of compilation begins.&lt;/p&gt;
&lt;h2 id=&#34;lexical-analysis&#34;&gt;Lexical analysis&lt;/h2&gt;
&lt;p&gt;Lexical analyzer is a part of the compiler front end and is responsible for tokenizing the given source file. What this means is that, when given a stream of characters, a lexical analyzer can turn that stream of characters into a set of distinct lexemes. These lexemes can&lt;/p&gt;
&lt;p&gt;be separated by some delimiter. A token can have many lexemes, which essentially means that a token is a category of lexemes if that makes sense.&lt;/p&gt;
&lt;p&gt;for example, following statement&lt;/p&gt;
&lt;p&gt;&lt;code&gt; if ( i == 0 )&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;can be broken down into&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;lexemes&lt;/th&gt;
&lt;th&gt;token&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;if&lt;/td&gt;
&lt;td&gt;condition&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(&lt;/td&gt;
&lt;td&gt;bracket_open&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;i&lt;/td&gt;
&lt;td&gt;indetifier&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;equal_sign&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;integer&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;)&lt;/td&gt;
&lt;td&gt;bracket_end&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Tokenizing is very similar to how we break down complex sentences in natural languages. just like how a sentence is divided into different parts.&lt;/p&gt;
&lt;p&gt;But unlike humans, to achieve this task, lexical analyzers use pattern matching algorithms and regular expressions.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s also worth mentioning that lexical analysis or tokenizing can be done using unix utilities like FLEX and ANTLR.&lt;/p&gt;
&lt;h2 id=&#34;syntax-analysis&#34;&gt;Syntax analysis&lt;/h2&gt;
&lt;p&gt;Syntax analysis is the second phase of the compiler&amp;rsquo;s front end. Unlike lexical analysis, where pattern matching algorithms and regular expressions are used to identify tokens, Syntax analysis use a&lt;/p&gt;
&lt;p&gt;concept known as Context-Free Grammar (CFGs). Context-Free Grammar is kinda similar to regular grammar but it&amp;rsquo;s mainly used to describe the syntax of programming languages. basically, it&amp;rsquo;s a superset of regular grammar.&lt;/p&gt;
&lt;p&gt;When the lexical analyzer outputs the stream of tokens, these tokens are then fed into the syntax analyzer. Then the syntax analyzer analyzes and parses the stream of tokens against different rules and&lt;/p&gt;
&lt;p&gt;detect syntax errors in the code.&lt;/p&gt;
&lt;p&gt;for example, &lt;code&gt;if ( i == 0 &lt;/code&gt; is passed down, it is the syntax analyzers job to report it as an error. However, some syntax analyzers are capable of continuing the parsing process even if there are syntax errors. To achieve&lt;/p&gt;
&lt;p&gt;this, syntax analyzers use error recovery strategies.&lt;/p&gt;
&lt;p&gt;After parsing all the syntax, the syntax analyzer should generate a parse tree. A parse tree is a representation of the production rules.&lt;/p&gt;
&lt;p&gt;for example, applying left-derivation production rule on &lt;code&gt;x + b - c&lt;/code&gt;, resulting parse tree is&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;E -&amp;gt; E - E

E -&amp;gt; E + E - E

E -&amp;gt; id + E - E

E -&amp;gt; id + id - id



        E
    ---------
    |   |   |
    E   -   E
____|____
|   |   |
E   +   E
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Syntax analysis can be done using YACC(Yet Another Compiler Compiler), CUP, Bison, and ANTLR.&lt;/p&gt;
&lt;h3 id=&#34;abstract-synstax-trees-asts&#34;&gt;Abstract Synstax Trees (ASTs)&lt;/h3&gt;
&lt;p&gt;Just like a parse tree, an abstract syntax tree or AST is a graph representation of the source code. How an AST differs from a parse tree is, an AST is a simplified version of the parse tree. And in ASTs operators are internal nodes. ASTs are also considered to be the out of syntax analysis phase of a compiler.&lt;/p&gt;
&lt;p&gt;Remember CFGs?, in modern programming languages, there are lots of things that CFGs cant express. for example type definitions. Almost every modern language allows new types. However, CFGs cannot represent new types and&lt;/p&gt;
&lt;p&gt;their usage. ASTs can solve these problems.&lt;/p&gt;
&lt;p&gt;Another major usage of ASTs is that a full traversal of the AST data structure represents the correctness of the program. ASTs are heavily used in semantic analysis too.&lt;/p&gt;
&lt;h2 id=&#34;the-end&#34;&gt;THE END&lt;/h2&gt;
&lt;p&gt;So yeah that&amp;rsquo;s it for the compiler front end. I suggest readers go through &amp;ldquo;Concepts of programming languages&amp;rdquo; for more detailed explanations.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ll do the optimization article soon. until then&amp;hellip;&lt;/p&gt;
</content>
    </item>
    
  </channel>
</rss>
